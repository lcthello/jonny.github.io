<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宁萌的笔记本</title>
  
  <subtitle>A Notebook by Julie</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://juliecodestack.github.io/"/>
  <updated>2020-07-22T04:16:37.851Z</updated>
  <id>https://juliecodestack.github.io/</id>
  
  <author>
    <name>宁萌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读书的要领</title>
    <link href="https://juliecodestack.github.io/2020/04/26/%E8%AF%BB%E4%B9%A6%E7%9A%84%E8%A6%81%E9%A2%86/"/>
    <id>https://juliecodestack.github.io/2020/04/26/%E8%AF%BB%E4%B9%A6%E7%9A%84%E8%A6%81%E9%A2%86/</id>
    <published>2020-04-26T13:41:18.000Z</published>
    <updated>2020-07-22T04:16:37.851Z</updated>
    
    <content type="html"><![CDATA[<img src="https://img9.doubanio.com/view/subject/l/public/s4247555.jpg" width="325" height="450" alt="本书封面图片，来源：豆瓣" align="center"><p>首先承认，在读 <strong><em>How To Read A Book</em></strong> 之前，我原以为这类指南书可能都是像教科书一样，讲一些条条框框的指导建议。可是，读过之后却有一种相见恨晚的感觉，意识到自己以前读书都没有掌握有效的方法、不得要领。我读了一遍英文版，又读了一遍中文版，对读书方法、书单选择有了新的思考，很受启发。我把书中的精华总结归纳了一下，与大家分享。</p><a id="more"></a><h4 id="主动阅读"><a href="#主动阅读" class="headerlink" title="主动阅读"></a>主动阅读</h4><p>我们要让自己在阅读中有收获，就要做一个主动的读者，带着问题去阅读。那么，应该提什么问题呢？可以从以下四个方面提问：</p><ul><li>这本书谈了什么？（主旨）</li><li>作者是怎么阐述观点的？（论点、结构）</li><li>这本书说的有道理吗？全部有道理，还是部分有道理？</li><li>这本书对于我们的意义是什么？换句话说，就是我们读书之后的收获，是知识、洞见、启发，还是什么？</li></ul><h4 id="阅读的四个层次"><a href="#阅读的四个层次" class="headerlink" title="阅读的四个层次"></a>阅读的四个层次</h4><img src="/2020/04/26/%E8%AF%BB%E4%B9%A6%E7%9A%84%E8%A6%81%E9%A2%86/readinglevel.png" width="325" height="300" alt="阅读的四个层次示意图" align="center"><p>这里我画了一个简单的示意图说明阅读的四个层次，其中，高层次的阅读是建立在掌握低层次阅读的基础之上。第一个层次的阅读，基础阅读（Elementary Reading），就是基本的见文知义能力，这一阅读能力在小学和初中教育中建立。而对于检视阅读（Inspectional Reading）、分析阅读（Analytical Reading）和主题阅读（Syntopical Reading），很多人都没有掌握正确的方法。下面简要介绍一下这三种阅读。</p><h5 id="检视阅读（Inspectional-Reading）"><a href="#检视阅读（Inspectional-Reading）" class="headerlink" title="检视阅读（Inspectional Reading）"></a>检视阅读（Inspectional Reading）</h5><p>检视阅读是快速阅读，但这种快，并不是走马观花、囫囵吞枣，而是利用有限的时间充分提取书籍信息。因此，检视阅读主要包括：</p><p>1、查看书名、目录、索引、序、后记等信息，甚至书封也可以看看，明确书的主题，为书籍分类，看属于虚构小说、还是非虚构论述作品。如果是论述作品，又可以思考一下是属于“解释是什么”的理论性作品，还是属于告诉读者“要怎么做”的实用性作品。</p><p>2、把握书籍大致的架构、大纲。</p><p>3、浏览一下全书，对于书的内容有个大致的印象。打个比方，就像侦探一样，在书里寻找线索式地读书，有快有慢，而不是一个速度从头读到尾。如果遇到不懂的地方，也不要停下来去查询，留待后续阅读解决。只要读懂了一部分，对书有个大概印象即可。</p><p>做完检视阅读，我们可以知道：这本书的主题、分类，还有很重要的一点：是否值得再读一遍？这里我谈一点自己的体会，回想自己经常都是拿起一本书，从第一页开始读起、一个速度读完…相比之下，检视阅读的方法的确做到了高效阅读。我按这种方法快速浏览了两本实用类的书，发现很快能知道书的主题、作者的重点放在哪里，这样就知道哪里可以读快一点、哪里需要仔细读，读完之后也能总结大致的观点。</p><h5 id="分析阅读（Analytical-Reading）"><a href="#分析阅读（Analytical-Reading）" class="headerlink" title="分析阅读（Analytical Reading）"></a>分析阅读（Analytical Reading）</h5><p>分析阅读就像一个拆卸机械的过程。前面检视阅读中我们已经知道了书籍的框架，那么，作者是如何加入描述、论证、说明，让其立体丰满起来？这就是我们要完成的分析工作。具体可分为三阶段：</p><p>1、提纲挈领：分析书的主题、分类、主旨、大纲、作者要解决的问题，可以看出，做好检视阅读对这一步有帮助；</p><p>2、析词达意，并且抓住主旨、重构论点、尝试回答问题，这一阶段就是对书进行深入解读，我们要尝试用自己的语言归纳总结作者的观点，而不仅仅是摘抄。（这也是我在本文中做的工作，结合读书时的笔记，用自己的话概况书中的观点。）</p><p>3、评论书籍，这一阶段的重点就是要确保读完读懂，不要片面下结论，而且对作者观点有异议应建立在事实依据或逻辑分析的基础上。</p><h5 id="主题阅读（Syntopical-Reading）"><a href="#主题阅读（Syntopical-Reading）" class="headerlink" title="主题阅读（Syntopical Reading）"></a>主题阅读（Syntopical Reading）</h5><p>主题阅读的要点就是阅读围绕一个主题展开，所有的工作都是为这个主题服务的。这里要注意的一点是，书不是中心，我们不需要研读每本书，只需要选取其中与主题相关的章节进行研读分析。</p><p>主题阅读主要包括以下步骤：</p><p>1、选择书籍：首先列一个大概的书单，然后进行第一次检视阅读，筛选出与主题相关的书，同时也帮助明确主题、建立概念。</p><p>2、围绕主题进行阅读：对选中的书籍进行第二次检视阅读，找出与主题最相关的章节。下一步的方法类似分析阅读，不同之处在于这里是以主题为中心。我们要建立词汇、主旨，列出议题，让作者“各抒己见”（根据书中内容，用刚建立的词汇来归纳表达），然后分析这些讨论。这个过程是不是很像开国际会议，每本书的作者都有自己的观点，作为读者，我们要把这些观点转述出来，就好像翻译一样，让不同书籍的作者可以讨论一个话题。</p><h4 id="作者提的一些有帮助的阅读建议"><a href="#作者提的一些有帮助的阅读建议" class="headerlink" title="作者提的一些有帮助的阅读建议"></a>作者提的一些有帮助的阅读建议</h4><p>1、读书在精不在多。“如果你的阅读目的是想变成一个更好的阅读者，你就不能摸到任何书或文章都读。如果你所读的书都在你的能力范围之内，你就没法提升自己的阅读能力。你必须能操纵超越你能力的书，或像我们所说的，阅读超越你头脑的书。只有那样的书能帮助你的思想增长。除非你能增长心智，否则你学不到东西。” </p><p>作者还提到了什么样的书是精品好书。他说，其中百分之九十的书都不需要分析阅读，可能有一小部分好书，值得你花时间仔细读一遍。在这些好书之中，又有这样一部分精品，你过一段时间再读一遍这本书时，又能发现新的内容和收获，就好像这本书和你一起成长。其实，是这本书内涵丰富，让不同读者每次阅读都有新的领悟。</p><p>2、读小说、故事时，如果人物角色众多，不要把记人名当作一个负担。就像我们新到一个地方，刚开始人生地不熟，随着时间推移，就熟悉周围人了。对应小说中，随着情节的深入，我们就知道谁是主要人物，其实只要记住主要人物就可以，而这些主角因为频繁出现，也很容易记住并且不会忘记。</p><p>3、读诗歌最好的方式就是朗读出来，多读几遍。读戏剧也是如此，有感情地读出台词，想象自己在导演这部戏剧。这里说一点体会，我读王尔德的戏剧时就用了这个方法，读剧本时脑子里描绘人物形象、性格、情绪，读起来有趣多了。</p><p>4、读历史的要点：<br>一、兼听则明：对于一个主题或事件，尽可能多读几本与之相关的书；<br>二、以史为鉴：读史的目的是什么？既是为了知道某时某地发生了什么事，也要明白当时的人们为什么会这么做，对于现在的我们有何借鉴意义。这一思考尤为重要，正所谓，“前事不忘，后事之师。”</p><p>5、科学著作没有那么高深。作者说到，直到十九世纪，很多科学著作的读者都是大众，也就是门外汉，因此我们可以读懂。或许我们不能读懂每一个原理，但至少我们可以学习一下作者论证说明的思路，他是如何分析问题的，以及更多的启发。</p><h4 id="带去荒岛的十本书"><a href="#带去荒岛的十本书" class="headerlink" title="带去荒岛的十本书"></a>带去荒岛的十本书</h4><p>书中提到一种很古老的测验：如果你被警告将在一个无人荒岛度过余生，或至少很长的一段时间，而假设你有时间作一些准备，可以带一些实际有用的物品到岛上，还能带十本书去，你会选哪十本？</p><p>以前我以为这种书单选择的问题，就是回答自己最喜爱的十本书。读了作者的解答，我才意识到这不只是发现自己想一读再读的书。试想，在与世隔绝的环境，没有电视、没有收音机、没有图书馆，只有你跟十本书，那时，书提供的精神支持和启迪十分重要。再想想，我们有时候内心是不是也会有这样的孤独，面临相似的挑战——如何找出内在的资源、过更加美好的人类生活的挑战，此时，哪些书可以陪伴在我们走过这一段人生旅程？想到这里，我陷入了沉思，我想到了《老人与海》、《唐诗三百首》、《约翰.克里斯朵夫》、《月亮与六便士》…。看到这里，您想到了哪些书呢？欢迎留言告诉我呀。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://img9.doubanio.com/view/subject/l/public/s4247555.jpg&quot; width=&quot;325&quot; height=&quot;450&quot; alt=&quot;本书封面图片，来源：豆瓣&quot; align=&quot;center&quot;&gt;

&lt;p&gt;首先承认，在读 &lt;strong&gt;&lt;em&gt;How To Read A Book&lt;/em&gt;&lt;/strong&gt; 之前，我原以为这类指南书可能都是像教科书一样，讲一些条条框框的指导建议。可是，读过之后却有一种相见恨晚的感觉，意识到自己以前读书都没有掌握有效的方法、不得要领。我读了一遍英文版，又读了一遍中文版，对读书方法、书单选择有了新的思考，很受启发。我把书中的精华总结归纳了一下，与大家分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>英文有声书和广播剧推荐之二</title>
    <link href="https://juliecodestack.github.io/2020/04/24/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0%E4%B9%A6%E5%92%8C%E5%B9%BF%E6%92%AD%E5%89%A7%E6%8E%A8%E8%8D%90%E4%B9%8B%E4%BA%8C/"/>
    <id>https://juliecodestack.github.io/2020/04/24/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0%E4%B9%A6%E5%92%8C%E5%B9%BF%E6%92%AD%E5%89%A7%E6%8E%A8%E8%8D%90%E4%B9%8B%E4%BA%8C/</id>
    <published>2020-04-24T13:33:16.000Z</published>
    <updated>2020-04-25T01:52:19.906Z</updated>
    
    <content type="html"><![CDATA[<p>接着<a href="https://juliecodestack.github.io/2020/04/24/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0%E4%B9%A6%E5%92%8C%E5%B9%BF%E6%92%AD%E5%89%A7%E6%8E%A8%E8%8D%90%E4%B9%8B%E4%B8%80/">上一篇文章</a>，继续介绍好的英文有声书和广播剧。文中提供了相应的喜马拉雅/B站链接， <strong>只要点击“收听链接”项，就可直达作品页面收听，</strong> 感谢播主/up主的分享！</p><a id="more"></a><blockquote><p>8.英文有声书-类型：儿童文学<br>书名：Esio Trot<br>作者：Roald Dahl<br><a href="https://www.ximalaya.com/ertong/16804268/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这本书的作者 Roald Dahl 写了很多儿童故事，其中就包括《查理和巧克力工厂》。</p><p>这个小故事说的是一位男士爱慕楼下女邻居，却不敢表白。女邻居养了一只小乌龟，有一天聊天，女邻居说小乌龟为什么一直不长个呢？男士主动说他有生长咒语。那么，小乌龟长大了吗？它是怎么长大的呢？哈哈，有趣的小故事。</p><blockquote><p>9.英文有声书-类型：儿童文学<br>书名：The Giraffe and the Pelly and Me<br>作者：Roald Dahl<br>播讲者：Hugh Laurie<br><a href="https://www.ximalaya.com/youshengshu/19969604/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这个故事也是 Roald Dahl 写的。长颈鹿、鹈鹕和猴子组成了一个无梯子擦窗户公司，它们是怎么分工的呢？后来又有怎样的奇遇呢？</p><p>这个有声书的精彩之处在于播讲者把里面的唱段唱出来了，非常欢快，很好听，而且各个角色也是活灵活现。我很喜欢这部作品。</p><blockquote><p>10.英文有声书-类型：儿童文学<br>书名：Alice’s Adventures in Wonderland<br>作者：Lewis Carroll<br><a href="https://www.ximalaya.com/youshengshu/18578323/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>我在喜马拉雅试听了几个版本的开头，最后选了这个版本听，主要原因就是这个书里面的 Alice 也是由一个小女孩演绎的，声音里传递出来的人物性格、脾气都非常符合角色。</p><blockquote><p>11.英文广播剧：Love virtually<br>演员：David Tennant &amp;Emilia Fox<br><a href="https://www.ximalaya.com/waiyu/16100569/95143213" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>一封发错地址的邮件，牵起一段网络情缘。剧情设定有点类似于电影《电子情书（You Got a Mail）》，喜欢爱情故事的朋友不要错过。</p><p>如果听完觉得意犹未尽，可以听续集Every Seventh Wave。</p><blockquote><p>12.英文广播剧：Turing’s Test<br>演员:Samuel Barnett &amp; Paul Kendrick<br><a href="https://www.ximalaya.com/waiyu/16100569/95113208" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这个广播剧时间不长，只有半个小时。剧中主角是图灵的灵魂。图灵对于计算机、人工智能都有杰出的贡献，计算机学科最高奖“图灵奖”就是以他的名字命名，人工智能的经典测试：“图灵测试”也是由图灵提出。图灵因为同性恋身份被定罪，后来吃下含有氰化物的毒苹果身亡。这部剧就是设想图灵的灵魂与计算机之间的对话。演员感情充沛，听众很容易融入其中，感受到图灵的痛苦。</p><p>Samuel Barnett 的演绎十分精彩，我也因此喜欢上了他的声音，接下来要推荐的两部作品都是由他主演或朗读的。</p><blockquote><p>13.英文广播剧：Cicero<br>主演：Samuel Barnett，饰演Marcus Tullius Cicero<br>George Naylor，饰演Quintus Tullius Cicero<br><a href="https://www.bilibili.com/video/BV16t411t7gF" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这部广播剧讲述的是古罗马著名政治家、演说家、雄辩家 Cicero（西塞罗）年轻时的故事，当时 Cicero 正从事律师工作。强烈推荐第一集，Cicero 的法庭辩论，逻辑清晰，论证严谨，十分精彩！这个案子也让年轻的 Cicero 在律师界一举成名。</p><blockquote><p>14.英文有声书—类型：人物、回忆录<br>书名：My Week with Marilyn<br>播讲者：Samuel Barnett<br><a href="https://www.ximalaya.com/waiyu/4741469/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>书名中的 Marilyn 就是玛丽莲梦露，这本书回忆了作者在剧组工作时与梦露女神相处的一周。Samuel 的声线塑造年轻的男主角很贴切。这本书让我感到惊讶之处是，想不到大众女神 Marilyn 的内心是个敏感脆弱、渴望爱的小孩。<br>ps: 片尾有彩蛋，最后是一段 Marilyn 的歌声。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着&lt;a href=&quot;https://juliecodestack.github.io/2020/04/24/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0%E4%B9%A6%E5%92%8C%E5%B9%BF%E6%92%AD%E5%89%A7%E6%8E%A8%E8%8D%90%E4%B9%8B%E4%B8%80/&quot;&gt;上一篇文章&lt;/a&gt;，继续介绍好的英文有声书和广播剧。文中提供了相应的喜马拉雅/B站链接， &lt;strong&gt;只要点击“收听链接”项，就可直达作品页面收听，&lt;/strong&gt; 感谢播主/up主的分享！&lt;/p&gt;
    
    </summary>
    
    
      <category term="英文有声" scheme="https://juliecodestack.github.io/categories/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="有声书" scheme="https://juliecodestack.github.io/tags/%E6%9C%89%E5%A3%B0%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>英文有声书和广播剧推荐之一</title>
    <link href="https://juliecodestack.github.io/2020/04/24/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0%E4%B9%A6%E5%92%8C%E5%B9%BF%E6%92%AD%E5%89%A7%E6%8E%A8%E8%8D%90%E4%B9%8B%E4%B8%80/"/>
    <id>https://juliecodestack.github.io/2020/04/24/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0%E4%B9%A6%E5%92%8C%E5%B9%BF%E6%92%AD%E5%89%A7%E6%8E%A8%E8%8D%90%E4%B9%8B%E4%B8%80/</id>
    <published>2020-04-24T11:44:46.000Z</published>
    <updated>2020-04-25T13:39:13.864Z</updated>
    
    <content type="html"><![CDATA[<p>近两年我对英文有声书很感兴趣，我觉得有声书的魅力在于播讲者让书的语言生动起来，同时又忠于原著，给读者（听众）留有一些想象的空间，可以自己“描绘”角色形象。听有声书给了我很多美好的回忆，跟着书中的人物高兴或者悲伤，听着听着，有时一个人也哈哈大笑，有时又泪眼朦胧。现在我想到听过的某本书，脑子里会浮现出听书时让我印象深刻的话，以及播讲者读这句话的声音、语气、情绪。</p><p>最近听哈利波特有声书时，播讲者 Jim Dale 在录音结尾说的一段话我挺认同。他说，回想我们小时候最初的阅读能力就是通过听父母读故事书获得。听书对于孩子阅读习惯和读书兴趣的培养很重要。我认为，听有声书是培养语感的好方法，而且有声书一般有故事情节，更能激发我们上下文联想的能力。此外，听有声书可以和一些简单的工作同时进行，比如散步、做家务等等，高效地利用时间。</p><p>说了这么多有声书的好处，您是不是也跃跃欲试，想开始英文有声书之旅呢？那么，问题来了，听什么？去哪里找资源？</p><a id="more"></a><h4 id="听什么？"><a href="#听什么？" class="headerlink" title="听什么？"></a>听什么？</h4><p>建议从自己感兴趣的题材入手。爱情、科幻、侦探、悬疑、童话…，都可以。就我自己的经验而言，听之前我会搜索一下这本书的简介，了解大概的故事情节、人物等信息，这样听的时候更容易集中注意力。对于找不到简介的作品，我就会先听，听到一半左右，弄清了大致情节和人物关系，如果和前面听书时的重点有偏差，我就回到开头再听一遍，这样就能把握整本书的大致情节，理解作者的意思。</p><h4 id="听不懂怎么办？"><a href="#听不懂怎么办？" class="headerlink" title="听不懂怎么办？"></a>听不懂怎么办？</h4><p>请回想一下，我们小时候，一开始是不是也不能完全听懂读懂，会遇到好多“生词”？有时我们结合上下文、故事情节推测出来意思，有时查字典、问老师之后明白了意思。这里也是一样，不用追求每词都听清楚、每词必懂，而是像我们听别人说话一样，让自己进入语境中，抓住主要意思。</p><h4 id="去哪里找资源？"><a href="#去哪里找资源？" class="headerlink" title="去哪里找资源？"></a>去哪里找资源？</h4><p>1.豆瓣英文有声书小组，里面有很多有声书推荐和介绍，有的资源可以下载。<br>2.喜马拉雅、哔哩哔哩（B站），这两个APP可是学英语的好帮手哦！试着到里面搜索想听的书看看，说不定就有热心的播主分享了这一资源可以收听。</p><p>我把自己听过的英文有声书和广播剧中觉得好的作品整理总结，分享给大家参考。同时提供了相应的喜马拉雅/B站链接， <strong>只要点击“收听链接”项，就可直达作品页面收听</strong>，在此感谢播主/up主的分享！</p><blockquote><p>1.英文有声书-类型：都市爱情，<br>书名：Rage of Angels，<br>作者：Sidney Sheldon，<br>播讲者：Lorelei King。<br><a href="https://www.ximalaya.com/waiyu/3150288/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这部小说的作者是大名鼎鼎的畅销书作家 Sidney Sheldon，他被誉为说故事高手，书中人物描写、用词等都很棒。</p><p>小说讲的是一位刚工作的年轻女律师 Jennifer 的成长之路（其中描写了几个案子和精彩的法庭辩护），以及她与参议员、黑手党老大之间的情感纠葛。以现在的眼光来看，可能剧情略显俗套，因为这是上世纪八十年代写的小说，现在的人们看多了各种都市剧，已经熟悉了这类题材的套路，哈哈。</p><p>之所以首推这部作品，是因为它让我第一次体会到了有声书“绘声绘色”的感觉。播讲者让书中的每个人物都栩栩如生，就拿法庭辩护来说，正方公诉律师检察官、反方辩护律师、嫌疑人、原告、被告、法官，这么多人物，大段对白，看书都很容易就把各个人物说的话弄混了，而播讲者通过不同的声音、语速、语气，把各个人物分别塑造出来，你能感受到不同人物的不同性格、脾气，让听众有强烈的现场感。</p><blockquote><p>2.英文有声书-类型：科幻，<br>书名：I, Robot，<br>作者：Isaac Asimov，<br>播讲者：Scott Brick。<br><a href="https://www.ximalaya.com/youshengshu/6675518/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这是大名鼎鼎的科幻小说作家阿西莫夫（Isaac Asimov）的作品，里面有九个小故事，都是关于机器人和人类的故事。书中还有著名的 <strong>“机器人三定律”</strong>：</p><p>一、机器人不能伤害人类，或者看到人类有危险而坐视不管；<br>二、机器人必须服从人类的命令，除非与定律一冲突的情况；<br>三、在不违反定律一、二的情况下，机器人要自保。</p><p>书中很多故事都是围绕“三定律”产生的悖论情况展开讨论。 这本短篇小说集发表于六十多年前，可是现在看来仍不过时，精彩至极！听完之后，以前关于人工智能、科幻的诸多想法、认知就在我的脑海中翻腾碰撞，让我不停回想。更重要的一点，这本书让我联想到现在对于人工智能的利弊讨论，这一问题的根源在人类自身，解决问题的钥匙在人类手中。</p><p>一开始听播讲者 Scott Brick 的声音觉得有些平淡，但是耐心听完第一个小故事之后，就越来越入迷。现在想起这部作品，我脑子里还会回响起各种声音：</p><ul><li>小女孩惊喜地呼喊机器人“Robbie”；</li><li>机器人中的“笛卡尔”Cutie 一本正经地说“I myself, exist, because I think”；</li><li>“Liar”那一集的最后，机器人的痛苦崩溃；</li><li>机器Brain思考中被Susan打断，他的那声呆萌的“Huh?”；…</li></ul><p>无一不活灵活现。播讲者让机器人鲜活起来，让我在想象这些机器人时不再想到冰冷的机器和机械的语音，而是也有情感，也会失落、伤心、纠结、迷茫、生气。其实想想也是，机器人由人类制造，自然也会带有人类的行为模式。总之，这本书值得一听、值得一读。</p><blockquote><p>3.英文有声书-类型：科幻，<br>书名：Flowers for Algernon<br>作者：Daniel Keyes<br><a href="https://www.ximalaya.com/youshengshu/22485157/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这部小说先后获得科幻小说界最重要的两项大奖：雨果奖、星云奖。看到这里您可能会好奇，这部小说为何能屡获殊荣？它有何特别或是精彩之处？<br>作者在书中设想了有一种脑部手术可以提高智力。先天弱智的 Charlie 在32岁时作为试验对象接受了这种外科手术，短时间内智力快速提升，顶峰时达到天才智商，然后又开始退化。这本书以Charlie的日记形式，记录了他在手术前后几个月内经历的人情冷暖和悲喜交加。读这本书，跟着 Charlie 一起在短时间内品尝人生百味，心情起起伏伏、思绪万千。书中的心理描写很细致真实。了解更多本书，欢迎阅读我的书评：<a href="https://juliecodestack.github.io/2020/04/22/%E4%B8%80%E6%9C%AC%E4%B9%A6%E4%B8%AD%E7%9A%84%E4%BA%BA%E7%94%9F%E6%BB%8B%E5%91%B3/#more">一本书中的人生滋味</a></p><p>这本书的特别之处在于，作者是根据 Charlie 不同时期的智力水平来写日记，因此，书开篇和末尾的日记有很多错别字。如果看文字版，可能需要适应一下。但是有声书里是通过另一种方式来呈现，从开始语气的迟缓、停顿等，到智力提升之后语速加快、增加情绪，播讲者演绎的很好，给人感觉就像在听 Charlie 自己读日记一样。</p><blockquote><p>4.英文有声书-类型：非虚构，科学，人物传记<br>书名：Surely You’re Joking, Mr. Feynman!<br>作者：Richard P. Feynman<br>播讲者：Raymond Todd<br><a href="https://www.ximalaya.com/waiyu/4285455/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这本书的作者就是参加了原子弹研制、得过诺贝尔奖的物理学家费曼。书中有很多有趣的小故事，让我看到了费曼的率真、对于科学的好奇探索和严谨执着。让我印象最深的一点是他提到怎样的学习、教育才是有效的，不是背诵知识点，而是去总结、去验证、试错。费曼也很幽默“调皮”，他多才多艺，学语言、画画、打鼓…有时还会恶作剧，有些故事也让我意识到人们有时会陷入固定思维，反而不能做出最好的判断和选择。</p><blockquote><p>5.英文有声书-类型：非虚构，科学，人物传记<br>书名：What Do You Care What Other People Think?<br>作者：Richard P. Feynman<br><a href="https://www.ximalaya.com/waiyu/12878886/" target="_blank" rel="noopener">收听链接</a>  </p></blockquote><p>这本书同样是物理学家费曼的作品， 上一本书《Surely You’re Joking, Mr. Feynman!》比较幽默风趣，让人了解生活中的费曼，这本书给我启发和思考则更多。书中讲到费曼父亲的教育方法、费曼对阿琳的一往情深、以及他对于挑战者号失事的分析和思考，都让人印象深刻。特别推荐读一读后记，费曼从哲学的角度分析了科学的价值、科学的双刃剑效应，他对未来的思考等等。科学一直在发展，但是我们对于人类自己所知的还太少，还需要去发现可能性、去探索、怀疑、求证。</p><p>听了这两本有关费曼的书之后，我写了一篇书评，欢迎点击阅读：<a href="https://juliecodestack.github.io/2020/04/22/%E7%8E%87%E7%9C%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E5%AE%B6%E8%B4%B9%E6%9B%BC/#more">率真的科学家费曼</a></p><blockquote><p>6.英文广播剧：Copenhagen<br>演员：<br>Benedict Cumberbatch(“卷福”)，饰演Werner Heisenberg(海森堡)<br>Simon Russell Beale，饰演Niels Bohr (玻尔)<br>Greta Scacchi，饰演Margrethe Bohr(玻尔夫人)<br><a href="https://www.ximalaya.com/waiyu/13588780/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>二战期间，1941年，德国物理学家海森堡在到访哥本哈根之时，曾与他的老师——物理学家玻尔有一次会面。因为双方都是原子能领域的重要科学家，又分属战争敌对国，这次见面引起世人的诸多猜测。而双方后来对会谈内容讳莫如深，让这件事情显得更加神秘，他们谈了什么？与原子弹研制有怎样的关系？本剧设想了玻尔夫妇和海森堡在天堂对这次见面内容的回忆，演绎得很精彩。在他们三人的争吵和回忆中，听众对于科学的双刃剑效应、科学家的国界等问题会有很多思考。</p><blockquote><p>7.英文有声书-类型：非虚构，科技<br>书名：AI Superpowers: China, Silicon Valley, and the New World Order<br>作者：Kai-Fu Lee（李开复）<br><a href="https://www.ximalaya.com/youshengshu/18903878/" target="_blank" rel="noopener">收听链接</a></p></blockquote><p>这本书是李开复老师的最新作品，书的前半部分讨论了中国 AI 的崛起，回顾了中国互联网公司和产业的发展；后面讨论 AI 未来和 AI 伦理，分析人与机器的不同，是爱和被爱的能力，设想了如何用社会服务工作来作为新的工作价值衡量标准，建设一个更美好、有爱的社会。了解更多本书，欢迎阅读我的书评：<a href="https://juliecodestack.github.io/2020/04/22/%E4%BB%8E%E4%BF%A1%E6%81%AF%E6%97%B6%E4%BB%A3%E5%88%B0%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3/#more">从信息时代到智能时代</a></p><p>书中开复老师讲到了中国互联网公司的发展历史，比如美团、科大讯飞、百度等，他还对比了中国科技公司与硅谷科技公司的不同，竞争力、优劣势等。这些科技公司的名字我们都很熟悉，甚至也经常使用它们的产品，但是用英语描述、谈论它们又是一种新的感觉，您不妨听听看。</p><p>这本书还给我一点启示就是，在需要情感交流的地方，机器人始终难以取代人。虽然有聊天机器人，恐怕人们内心还是希望是在和人对话。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近两年我对英文有声书很感兴趣，我觉得有声书的魅力在于播讲者让书的语言生动起来，同时又忠于原著，给读者（听众）留有一些想象的空间，可以自己“描绘”角色形象。听有声书给了我很多美好的回忆，跟着书中的人物高兴或者悲伤，听着听着，有时一个人也哈哈大笑，有时又泪眼朦胧。现在我想到听过的某本书，脑子里会浮现出听书时让我印象深刻的话，以及播讲者读这句话的声音、语气、情绪。&lt;/p&gt;
&lt;p&gt;最近听哈利波特有声书时，播讲者 Jim Dale 在录音结尾说的一段话我挺认同。他说，回想我们小时候最初的阅读能力就是通过听父母读故事书获得。听书对于孩子阅读习惯和读书兴趣的培养很重要。我认为，听有声书是培养语感的好方法，而且有声书一般有故事情节，更能激发我们上下文联想的能力。此外，听有声书可以和一些简单的工作同时进行，比如散步、做家务等等，高效地利用时间。&lt;/p&gt;
&lt;p&gt;说了这么多有声书的好处，您是不是也跃跃欲试，想开始英文有声书之旅呢？那么，问题来了，听什么？去哪里找资源？&lt;/p&gt;
    
    </summary>
    
    
      <category term="英文有声" scheme="https://juliecodestack.github.io/categories/%E8%8B%B1%E6%96%87%E6%9C%89%E5%A3%B0/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="有声书" scheme="https://juliecodestack.github.io/tags/%E6%9C%89%E5%A3%B0%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>迎接5G时代</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E8%BF%8E%E6%8E%A55G%E6%97%B6%E4%BB%A3/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E8%BF%8E%E6%8E%A55G%E6%97%B6%E4%BB%A3/</id>
    <published>2020-04-22T13:12:04.000Z</published>
    <updated>2020-04-24T01:31:52.471Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文写于2020年1月。</p></blockquote><h3 id="5G-来了"><a href="#5G-来了" class="headerlink" title="5G 来了"></a>5G 来了</h3><p>刚刚过去的 2019 年是 5G 商用元年。19 年 6 月，5G 牌照发放。11 月，5G 商用套餐正式上线。“ 5G ” 也成为年度热词、大家谈论的焦点。许多人可能会有疑问：5G 除了比 4G 网速快了，还有哪些不同之处？5G 来了，它能给社会和生活带来哪些变化和便利？带着同样的问题，我打开了这本最新出版的 <strong>《 5G 时代：经济增长新引擎》</strong>，听北京邮电大学孙松林教授讲述 5G 的发展之路，展望即将开启的 5G 时代。</p><a id="more"></a><p><img src="https://img1.doubanio.com/view/subject/l/public/s33537277.jpg" alt="图书封面图片，来源：豆瓣"></p><h3 id="5G-带来的变革"><a href="#5G-带来的变革" class="headerlink" title="5G 带来的变革"></a>5G 带来的变革</h3><p>读完这本书，我印象最深的就是 5G 带来的<strong>理念变革</strong>：</p><ul><li>由面向人的通信方式转变为面向物的通信方式，打造万物互联的社会。</li><li>将信息行业技术融入到通信行业，使通信网络的管理向软件化、智能化发展。</li></ul><p>可以预见，这两大转变将对信息社会、数字经济产生巨大的影响，而 5G 技术作为催化剂和桥梁，在其中发挥重要的作用。</p><h4 id="1-从面向人的通信到面向物的通信"><a href="#1-从面向人的通信到面向物的通信" class="headerlink" title="1. 从面向人的通信到面向物的通信"></a>1. 从面向人的通信到面向物的通信</h4><p>通信的本质是信息传输。传统的通信系统如书信、电报、电话等，都是以人为中心设计的，人是信息的最初发起者和最终消费者，传递的是人可以认知的信息，这就是面向人的通信。技术发展至今，计算机、手机终端产生的数据量远远超过一个人产生的数据量，正如书中所说，“我们无法想象用人类的语言去描述一个联网游戏中各个角色的位置和动作。” 此时，还采用面向人的通信方式，对于海量数据的发送和接收处理就显得力不从心。</p><p>另一方面，随着自动化和智能化的普及，包括传感器、控制器等各种机器被赋予了越来越多的功能，它们可以采集数据，产生、传送和展示信息。这一类通信过程是由物体、而不是人在主导，这就是典型的面向物的通信。</p><p>5G 之前所有的通信系统都是面向人的通信，偶尔会兼顾物，5G 技术对此做出了改变。5G 的梦想是“信息随心至，万物触手及”，不但延续了之前高速率传输的特点，而且将物体连接作为自己的使命。 5G 有三大应用场景：<br>(1) <strong>增强移动宽带 ( eMBB )</strong>，提供大带宽高速率的移动服务，可以看作是对 4G 个人用户业务的延续和提升。<br>(2) <strong>海量机器类通信 ( mMTC )</strong>，提供面向广域低功耗覆盖的物联网服务，可以在 1 平方千米内同时接入 100 万个设备，按连接数密度来算，这大约相当于在 1 个足球场内可放置 700 多个同时接入 5G 网络的设备。<br>(3) <strong>超高可靠低时延通信 ( uRLLC )</strong>，这一场景的名字正是其突出特点。在此场景下，传输的控制面时延只有 1 毫秒，超越了人的触觉极限；同时，可以支持每小时 500 千米的高速移动环境下通信。主要用于满足远程医疗、工业设备、车辆等物体的通信需求。</p><p>其中，后两种应用场景就是面向物的通信，这为通信打开了一片新天地。互联网也将依托 5G 从消费互联网渗透到产业互联网，带来新的产业和机会。</p><h4 id="2-信息行业IT与通信行业CT的融合，云网融合"><a href="#2-信息行业IT与通信行业CT的融合，云网融合" class="headerlink" title="2. 信息行业IT与通信行业CT的融合，云网融合"></a>2. 信息行业IT与通信行业CT的融合，云网融合</h4><p>书中详细介绍了 5G 采用的几项新技术，也可以称为 5G 的几大法宝，其中包括了软件定义网络( SDN )、网络功能虚拟化( NFV ) 和网络切片、边缘计算。这些新技术将促成 5G 时代信息行业与通信行业的融合和云网融合。</p><p><strong>(1) 软件化、智能化——IT与CT的融合</strong><br>软件定义网络 ( SDN )，是将传统网络设备的数据转发和路由控制两个模块分离，集中管理路由控制功能。举例来说，假设系统中有100 台不同配置的交换机，使用传统方法，需要登录每台交换机终端进行配置，效率低且故障率高，使用 SDN 就可以集中化管理配置网络设备，既让传输更加高效，又让网络维护十分便捷。</p><p>网络功能虚拟化 ( NFV ) ，是通过虚拟网络功能，把许多网络设备由目前的专有平台迁移到通用的 X86 平台上，帮助运营商和数据中心更加敏捷地为客户创建和部署网络特性，降低设备投资和运营费用。NFV 和软件定义网络 ( SDN ) 关系紧密，是 SDN 的补充。</p><p>SDN 通过将控制平面与数据平面分离，彻底打通了传统计算机网络（如互联网）和电信网络之间的逻辑通道。而 NFV 则是用信息行业 IT 的思维对通信行业 CT 进行的一场革命，最大的意义在于使用 IT 设备来管理电信网络，这彻底打通了 IT 与 CT 之间的硬件通道。5G 的伟大之处就在于它第一次大规模地将 IT 与 CT 进行深度融合，意义深远。</p><blockquote><p>软件化的应用：<strong>网络切片</strong><br>5G 需要支持语音、数据、物联网等多种业务，不同的业务场景对网络要求不同，那么，如何在一个网络里兼顾多种场景需求呢？<br>这就要用到网络切片，将物理网络通过软件划分为多个虚拟网络，不同网络适应不同业务需求。而实现这一技术的先决条件就是要能通过软件控制各个不同的网元，也就是前面介绍的 SDN 及 NFV 技术。</p></blockquote><p><strong>(2) 分布式计算——云网融合</strong><br>5G 强大的网络能力使得数据传输不再是瓶颈，但计算会捉襟见肘。大量的数据在终端与云端之间不停地传输，如果只靠云端来进行处理，整体时延将较大。边缘计算正是为了解决这一问题应运而生，它是在靠近物或数据源头的网络边缘侧，就近提供边缘智能服务。通俗地讲，即为就近处理数据，分担云端的计算负荷。这一技术将计算能力从集中单一的云端下沉分散到用户侧，这样可以减少响应时间，降低整体计算成本，提高系统性能。</p><p>5G 时代，全国连接终端有望超过1000亿，一个云化的核心网络毫无疑问是必需的。在 SDN/NFV 的基础上，未来网络需要划分为“三朵云”：接入云、控制云和转发云，它们有一个共同的特点，就是需要部署在网络边缘，即边缘云。边缘云将计算能力下沉，因此可以提供超低时延的大带宽服务，网络下载速度可能达到数百兆，甚至超过了机械硬盘的读写速度，这意味着一些常规、高计算量的应用部署在“边缘云”节点甚至可能比安装在“本地”更快。</p><p>业界普遍认为，5G 和云计算天生就是相互促进、相互融合的。一方面，5G 网络是一种“云源生”的数据传输网络，网络单元虚拟化可以帮助运营商更有效地布网和运维，把计算节点下沉这种边缘架构也是 5G 网络能够保持低时延的关键，是 5G 网络的大势所趋；另一方面，只有虚拟化和网络深度融合，才能让运营商有能力拓展出更多业务，比如为企业提供自定义专用网络和专用数据通路。因此，5G 和云计算必然相辅相成、协同发展。</p><h3 id="身边的-5G-应用"><a href="#身边的-5G-应用" class="headerlink" title="身边的 5G 应用"></a>身边的 5G 应用</h3><p>了解这么多新技术，大家最关心的可能还是与自己息息相关的 5G 应用。5G 时代，会有哪些新业务、新应用等着我们去体验和发现？书中对此也进行了介绍。</p><h4 id="1-畅快的游戏体验"><a href="#1-畅快的游戏体验" class="headerlink" title="1. 畅快的游戏体验"></a>1. 畅快的游戏体验</h4><p>5G 时代，云游戏会成为一个很有潜力的应用。云游戏的愿景是用户在手机端只需要处理视频，其它计算都交给云端。这样，对手机算力的需求减小，将显著降低游戏功耗并提高续航时间。对于在线手游而言，网络时延是影响游戏体验的最大因素。要解决时延问题，既要依赖 5G 网络建设，也需要部署边缘云以缩短服务器和用户终端的距离。在较短时期内，5G 的网络建设将领先于云端服务器的建设，因此，预计前期将支持时延不敏感的云游戏，后期随着云计算中心和云服务的完善，用户将在手机上体验到更多的动作类3A大作。</p><h4 id="2-不在现场、胜似现场"><a href="#2-不在现场、胜似现场" class="headerlink" title="2. 不在现场、胜似现场"></a>2. 不在现场、胜似现场</h4><p>在 5G 三大场景中，增强移动宽带 ( eMBB )将首先落地应用。这一场景的大带宽高速率特点，最适合的业务就是超高清视频。我们可以看到，目前各国的 5G 主推业务也是超高清视频、虚拟现实 ( VR ) / 增强现实 ( AR ) 等。那么，什么是超高清视频？国际电信联盟将屏幕的物理分辨率达到 3840x2160 及以上的显示称为超高清，目前主要有两种：“ 4K 分辨率 ” ( 3840 x 2160 像素，这也是我们常听到的“ 4K 超高清” ) 和“ 8K 分辨率 ” ( 7680 x 4320 像素 )。超高清能达到怎样的清晰度呢？举个例子，一帧 8K 分辨率的图像有大约 3300 万个像素点，在 65 英寸的电视上显示，肉眼几乎感觉不到颗粒感。</p><p>书中介绍了一些体育赛事、大型晚会采用“ 5G + 超高清 ”直播回传的例子，比如 2018 年韩国平昌冬奥会、2019 年央视春晚深圳分会场、篮球世界杯转播等等。值得一提的是，平昌冬奥会在部分比赛场馆部署了边缘计算服务器，进行了 4K 超高清 VR 沉浸式体验和任意回看。在用 VR 观看时，摄像机采集的海量数据不用传送到首尔的核心网，而只需传送到靠近赛场的边缘服务器，再传到现场 VR 区的头显上，传输距离短，保证了实时的观赛体验。未来随着技术的推广和成熟，我们将越来越多地体验到“ 5G + 超高清 ”带来的全方位高清视角。</p><p>除了为用户带来身临其境的观赏体验外，“ 5G + 超高清视频 ”还可以用于安防监控、工业生产监测等，使其更加高效准确。</p><h4 id="3-车联网"><a href="#3-车联网" class="headerlink" title="3. 车联网"></a>3. 车联网</h4><p>这几年随着大数据、人工智能的广泛应用，网约车、地图导航等应用已成为热门，而自动驾驶也得到了普遍关注。如果把路况信息、车辆都连上网，进行智能规划，交通状况是不是会更加有序顺畅？你是否也和我一样，设想过乘坐自动驾驶车辆出行的未来？要实现这一愿景，首先就要解决海量数据传输与处理、信息指令的快速传递等问题，目前的 4G 网络无法满足这一需求。而 5G 高可靠、高带宽、低时延的通信特性，可以为车联网的用户体验、车辆驾驶和协同通信提供有力支撑。同时，在网络部署中也同样会运用到边缘计算这一理念，将一部分业务部署在边缘云平台上，从而有效减少反应时延，使系统更加高效迅捷。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这本书让我对 5G 有了深入的了解，也对 5G 时代更加期待。书中说到，整个经济的对象分为物理世界和数字世界，而物理世界又可以简单地分为人（包括环境）和机器。第一次和第二次工业革命完成了生产过程的机械化和自动化，让机器替代人工作，但我们注意到，此时的活动仍然限于物理世界。第三次工业革命是由计算机发起的，从此开始了人和机器向数字世界迁移的过程，今天的信息通信技术正是在这一过程中起到桥梁作用。的确，当我们环顾四周，网上社交媒体、网上购物、网上预约…会发现我们正在不知不觉中步入数字世界。5G 技术的到来会加速这一迁移过程，可能带来数字经济的全面爆发。5G 结合云计算、人工智能、区块链、物联网等技术，将带来经济和社会的快速发展和变革，让我们拭目以待吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;本文写于2020年1月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;5G-来了&quot;&gt;&lt;a href=&quot;#5G-来了&quot; class=&quot;headerlink&quot; title=&quot;5G 来了&quot;&gt;&lt;/a&gt;5G 来了&lt;/h3&gt;&lt;p&gt;刚刚过去的 2019 年是 5G 商用元年。19 年 6 月，5G 牌照发放。11 月，5G 商用套餐正式上线。“ 5G ” 也成为年度热词、大家谈论的焦点。许多人可能会有疑问：5G 除了比 4G 网速快了，还有哪些不同之处？5G 来了，它能给社会和生活带来哪些变化和便利？带着同样的问题，我打开了这本最新出版的 &lt;strong&gt;《 5G 时代：经济增长新引擎》&lt;/strong&gt;，听北京邮电大学孙松林教授讲述 5G 的发展之路，展望即将开启的 5G 时代。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="科技" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>一本书中的人生滋味</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E4%B8%80%E6%9C%AC%E4%B9%A6%E4%B8%AD%E7%9A%84%E4%BA%BA%E7%94%9F%E6%BB%8B%E5%91%B3/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E4%B8%80%E6%9C%AC%E4%B9%A6%E4%B8%AD%E7%9A%84%E4%BA%BA%E7%94%9F%E6%BB%8B%E5%91%B3/</id>
    <published>2020-04-22T13:10:19.000Z</published>
    <updated>2020-04-25T13:33:19.128Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://img3.doubanio.com/view/subject/l/public/s4608452.jpg" alt="图书封面图片，来源：豆瓣"></p><blockquote><p>本文写于2019年11月。</p></blockquote><p>今天我想给大家推荐一本英文科幻小说 <strong>Flowers for Algernon（《献给阿尔吉侬的花束》）</strong>。</p><a id="more"></a><p>最早我是在一个科幻作品的指南资源帖中看到对这部作品的推荐和介绍，楼主介绍这本书时说，读完这本书，他静静地蒙在被子里哭了一场，这让我印象深刻。这是怎样的一部科幻作品呢？带着这样的疑问，我开始了阅读之旅。我先读了一点文字版，发现开篇就有很多错别字（卖个关子，原因稍后介绍），很不适应，感觉自己读到了盗版书，没有看下去。后来无意中在喜马拉雅听到了有声书版本，播讲者把错别字转换为迟缓语速和停顿的形式，我比较能接受。此外，朗读者的声音年轻，有大男孩的感觉，符合主人公 Charlie 的年龄特点。</p><p>作者 Daniel Keyes 学过心理学，善于描写心理。 1959年，Keyes 在《奇幻与科幻杂志》首度发表短篇的 Flowers for Algernon，赢得雨果奖的肯定，1966年将其扩展成长篇后又再次荣获该年度星云奖，一举囊括了科幻小说界最重要的两项大奖。那么，这部小说讲了怎样的一个故事呢？</p><p>书中设想了有一种脑部手术可以提高智力。先天弱智的 Charlie 在32岁时作为试验对象接受了这种外科手术，短时间内智力快速提升，顶峰时达到天才智商，然后又开始退化。这本书以 Charlie 日记的形式，记录了他在手术前后几个月内经历的人情冷暖和悲喜交加。书开篇和末尾的日记，正是作者按照 Charlie 智力低时的书写能力，故意用错别字写的。而书名里提到的 Algernon 是试验的小老鼠的名字，它比 Charlie 先做手术，智力得到成倍提高，比手术前的 Charlie 还要聪明。另一方面，Algernon 也充当了预言者的角色，它的一系列变化提前预示了 Charlie 在手术后将经历的智力提升、情绪变化、智力退化、身体衰落。而与 Algernon 不同的是，身处人类社会之中的 Charlie 体会到更多人生滋味，遇到人际关系的困惑，经历大喜大悲、得而复失。</p><p>读这本书，我的心里总是觉得酸楚、五味杂陈。人们常说，不如做一个快乐的傻子。书中也是这样，弱智时的 Charlie 只想让周围的人快乐，善良单纯的他总是微笑友善地对待每一个人。随着他手术后一天天变聪明，他突然意识到原来别人的快乐竟来自于对他的取笑捉弄，他无法接受，感到生气、愤怒。而具有讽刺意味的是，周围的人同样也无法接受他的改变（由于是试验手术，Charlie 不能告诉大家），他们不能容忍自己的智商竟然不如傻子。于是，Charlie 遭到嫉妒和排挤，大家觉得他傲慢无礼。Charlie 被解雇，离开了工作十几年的店。可是，后来有一段时间 Charlie 的智力退化到原来的低水平，他短暂地回到店里工作，有新同事欺负他时，那些老同事又都站出来保护他，这一点让人稍感欣慰。人性真是复杂而捉摸不透。</p><p>书中也探讨了一个人智力飞速增长时伴随而来的心理成长过程。Charlie 的智力水平终于从儿童到达正常成人甚至天才，但他的心理却还在儿童阶段，需要一段时间来成长。这一过程中有的描写很像青少年成长的历程，比如我们成长到某个阶段时，也许会发现原来小时候的偶像，自己心目中很聪明很厉害的人只是一个普通人。书中就有这样一个有趣的例子，Charlie 成为天才后发现以前自己眼中的天才——给他做手术的教授们，并非他原来想象中的知识渊博，他们也只是平凡人，他们也有很多不懂的地方，也为名利所累，这给 Charlie 带来一次小小的心灵冲击。</p><p>而当 Charlie 记忆的阀门打开，儿时的记忆大多带给他伤痛和恐惧，每次他的回忆都让人心疼。Charlie 好强的母亲不想让别人知道儿子的智力不足，她先是想尽办法给 Charlie 治病，在生了一个健康女儿之后，又对 Charlie 开始打骂，最后送走 Charlie。当我读到 Charlie 乖巧、笨拙地只想蜷缩在厨房角落里，害怕母亲的责骂和驱赶，可是，最后这个家也没有他小小身躯的容身之处时，忍不住心酸落泪。童年给 Charlie 留下了心理创伤，以致他对于爱情、女人总是向往又不敢接近。但是，他最终选择了原谅，并且在自己高智商时去见了母亲一面，希望母亲能为此时的他感到骄傲。当他们相认时，Charlie 的智商正是顶峰时期，他是个天才，知识渊博，通晓多国语言，可是，出乎意料地，他开口第一句，回到曾经的傻傻的状态：“Ma…”，听到这一句时，我哽咽了。一个人不管如何变化，在父母面前，大概还是会变回最初的那个小孩，一个想得到“你是个好孩子”肯定的小孩。</p><p>读完这本书，我也想静静地坐一会儿，默默流泪。为了什么流泪呢？是因为同情 Charlie 的境遇，还是因为想到 Charlie 所经历的，其实也是压缩版的人生？成长、迷茫、痛苦、原谅、善良…我们每个人也在经历、思考，然后改变、成长。此外，这本书还告诉我们，每一个生命，弱小或是强大，愚笨或是聪明，都值得也需要被尊重和爱。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/view/subject/l/public/s4608452.jpg&quot; alt=&quot;图书封面图片，来源：豆瓣&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文写于2019年11月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我想给大家推荐一本英文科幻小说 &lt;strong&gt;Flowers for Algernon（《献给阿尔吉侬的花束》）&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="有声书" scheme="https://juliecodestack.github.io/tags/%E6%9C%89%E5%A3%B0%E4%B9%A6/"/>
    
      <category term="小说" scheme="https://juliecodestack.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="科幻" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E5%B9%BB/"/>
    
  </entry>
  
  <entry>
    <title>信息论之父香农</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E4%BF%A1%E6%81%AF%E8%AE%BA%E4%B9%8B%E7%88%B6%E9%A6%99%E5%86%9C/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E4%BF%A1%E6%81%AF%E8%AE%BA%E4%B9%8B%E7%88%B6%E9%A6%99%E5%86%9C/</id>
    <published>2020-04-22T13:07:06.000Z</published>
    <updated>2020-04-25T13:32:41.223Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://img9.doubanio.com/view/subject/l/public/s29547304.jpg" alt></p><blockquote><p>本文写于2019年12月。</p></blockquote><p>提起香农，或许很多人都会感到陌生，可是，说到他的理论带来的福利——清晰的电话通信、浏览网页，…每个人都十分熟悉。<strong>香农( Claude Shannon, 1916-2001 )是信息论之父</strong>，这一理论引领人们进入了信息时代。而在信息论之前，香农已经有了另一项伟大成果：将布尔函数引入到开关电路设计中，实现了从模拟电路向数字电路的转化。</p><p>看到这些伟大的成就，想必您也对香农产生了好奇，这是怎样的一位天才人物，他是如何进行科学研究的，他的一生有哪些故事呢？<strong><em>A Mind at Play: How Claude Shannon Invented the Information Age</em></strong>  这本书讲述了香农在工作、研究、生活的经历和故事，让我们得以走近香农，也走近那个时代的科学家。</p><a id="more"></a><p>读完本书，我在深深佩服香农的才智之余，也对一些地方印象深刻，在这里与大家分享：</p><h4 id="1-简化、抽象、类比。"><a href="#1-简化、抽象、类比。" class="headerlink" title="1. 简化、抽象、类比。"></a>1. 简化、抽象、类比。</h4><p>香农善于简化和抽象，这样就能发现看似不同的事物之间的相通之处，进而联系、类比，得到新的解决思路。比如，复杂的模拟开关电路、遗传学问题、布尔函数，这看似不相干的三个领域，抛开那些表征，在简化后却是相似的。而让香农享誉全球的信息理论，也是香农对实际通信传输进行抽象、简化后推导得出，这样我们不用在意传输的是文字、语音、图片还是视频，不用在意传输环境的差异，不需要再用实验试错法来提高传输质量，而只用关注最重要的东西——信息量（用于衡量传输量的多少，香农定义了一个新的单位：比特）、信噪比（衡量传输中噪声干扰大小的指标），同时，这些指标也是在变化万端的传输应用场景中不变的可提取参数。</p><h4 id="2-专才与通才。"><a href="#2-专才与通才。" class="headerlink" title="2. 专才与通才。"></a>2. 专才与通才。</h4><p>香农是幸运的，不只因为他有天才的头脑，还因为他遇到了慧眼识才的伯乐：他的导师布什(Vannevar Bush)，布什认为科学家不应固守在一个小领域，而应该扩大眼界，因此，他鼓励数学系硕士毕业的香农挑战新的领域——推荐他去遗传学实验室做博士研究。后来香农遇到的几个“贵人”：Warren Weaver, Thornton Fry 均持相似观点，即科学家应该拓展自己关注的领域，不能只专注自己所学。</p><h4 id="3-为什么做科学研究？"><a href="#3-为什么做科学研究？" class="headerlink" title="3. 为什么做科学研究？"></a>3. 为什么做科学研究？</h4><p>因为好奇、想去知道事物背后的原因，也是因为好玩、有趣。知道这一点，就不难理解为什么香农会研究走迷宫的电动老鼠（机器学习的雏形）、抛接球的数学技巧等等。至于名利，他倒看得很淡。书中有一句很幽默的评论 “ Rarely has a thinker who devoted his life to the study of communication been so uncommunicative. ” 成名之后，他没有成为公众人物进行科普宣传等，依然在自己感兴趣的领域进行研究，也因此，世人对他知之甚少。</p><p>这本书的作者也提了一个引人深思的现象，在那个年代，科学家们都在积极探索、思考问题，甚至有的是看似没有什么用处的问题。对他们而言，开公司、做产品、赚钱并不是首要考虑的事情。现在的人们似乎认为科学研究就是代表一份稳定工作，人们做一项研究的出发点就是实用，反倒没有了以前人们发现的乐趣。</p><h4 id="4-香农与人工智能"><a href="#4-香农与人工智能" class="headerlink" title="4. 香农与人工智能"></a>4. 香农与人工智能</h4><p>香农曾说过：“ I’m a machine and you’re a machine, and we both think, don’t we? ” 他认为机器是可以做到“像”人一样思考，所谓“像”，就是从行为学角度看，达到“思考”的效果。同时，他敏锐地提醒人们，不要依据人的思考方式去设计人工智能，而应该根据机器自身的优缺点（而不是人的思维特点）、取长补短以得到最佳效果。</p><p>谈到人工智能的未来，香农是一个乐天派，他认为人类造出比自己强大的物种很正常。他还半开玩笑地说，从信息熵的效用角度看，机器替代人类无可厚非。</p><h4 id="5-通俗易懂"><a href="#5-通俗易懂" class="headerlink" title="5. 通俗易懂"></a>5. 通俗易懂</h4><p>书中讲述的理论对于大众来说似乎有点高深，但是并不用担心会看不懂，因为作者用了很多比喻、例子帮助读者理解。此外，文中还有不少排比句，文笔优美。举几个例子：</p><blockquote><p>Cryptography was the war’s white noise: it was ubiquitous, and yet only those paying the closest attention could pick it up.<br>将密码学比喻为战争时期的白噪声，无处不在（应用广泛），但不易察觉，只有最仔细的人能发现。我觉得这个比喻很巧妙。</p></blockquote><blockquote><p>Where Shannon was allergic to administrative work and bureaucracies of almost every kind, Weaver thrived in them.<br>Where Shannon considered teaching a nettlesome requirement of university employment, Weaver relished it.<br>And where Shannon could continue to pound away at a mathematical problem or research question until he struck sparks, pursuing problems with breathtaking intuition and instinct, Weaver had discovered that he possessed no such gift.<br>这里将Shannon和Weaver两个科学家（当时也是同事）对比，两人对于教职、行政工作、科研的态度形成鲜明对比，看出两人不同的爱好。</p></blockquote><blockquote><p>All of this communication—faster, cheaper, more voluminous—rests on Shannon’s realization of our predictability. All of that predictability is fat to be cut; since Shannon, our signals have traveled light.<br>最后这个“travel light”用词实在妙，意为轻装前行。自从香农提出信息论之后，人们终于找到了高效传输的正确方法。</p></blockquote><p>以前我觉得信息论、香农公式枯燥抽象，读了这本书，我了解香农提出理论的来龙去脉，体会到其中的简洁之美，又对信息论产生了兴趣，这真是本书的奇妙之处。强烈推荐这本书。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;



&lt;p&gt;&lt;img src=&quot;https://img9.doubanio.com/view/subject/l/public/s29547304.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文写于2019年12月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提起香农，或许很多人都会感到陌生，可是，说到他的理论带来的福利——清晰的电话通信、浏览网页，…每个人都十分熟悉。&lt;strong&gt;香农( Claude Shannon, 1916-2001 )是信息论之父&lt;/strong&gt;，这一理论引领人们进入了信息时代。而在信息论之前，香农已经有了另一项伟大成果：将布尔函数引入到开关电路设计中，实现了从模拟电路向数字电路的转化。&lt;/p&gt;
&lt;p&gt;看到这些伟大的成就，想必您也对香农产生了好奇，这是怎样的一位天才人物，他是如何进行科学研究的，他的一生有哪些故事呢？&lt;strong&gt;&lt;em&gt;A Mind at Play: How Claude Shannon Invented the Information Age&lt;/em&gt;&lt;/strong&gt;  这本书讲述了香农在工作、研究、生活的经历和故事，让我们得以走近香农，也走近那个时代的科学家。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="人物传记" scheme="https://juliecodestack.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"/>
    
      <category term="科技" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>率真的科学家费曼</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E7%8E%87%E7%9C%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E5%AE%B6%E8%B4%B9%E6%9B%BC/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E7%8E%87%E7%9C%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E5%AE%B6%E8%B4%B9%E6%9B%BC/</id>
    <published>2020-04-22T13:06:25.000Z</published>
    <updated>2020-04-25T13:47:22.812Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文写于2019年7月。</p></blockquote><p>最近听了两本有声书 <strong><em>Surely You’re Joking, Mr. Feynman!</em></strong> 和 <strong><em>What Do You Care What Other People Think?</em></strong> ，让我走近并了解费曼这位科学家。<strong><em>Surely You’re Joking, Mr. Feynman!</em></strong> 有很多小故事，就像朋友之间的聊天，读过之后知道了很多关于费曼的趣闻轶事。<strong><em>What Do You Care What Other People Think?</em></strong> 不如前者有名，但我特别推荐一读，里面对于教育、科学、研究等等的讨论和思考，让人很受启发。</p><p><img src="https://img1.doubanio.com/view/subject/l/public/s4259438.jpg" alt="图书封面图片，来源：豆瓣"></p><a id="more"></a><p>生活中的费曼是个率真的人，幽默风趣。他谈论自己泡吧、画画、打鼓、开密码锁然后恶作剧等等，让人忍俊不禁。他淡泊名利，对于工资、甚至诺贝尔奖都看得很淡，一开始听到这些故事感到难以置信，随后又领会到这确实是一种科学家的纯粹，做研究只是因为喜欢科学，因为兴趣，而非名利。但费曼并没有通常人们想象中的天才的孤僻，他对于第一任妻子阿琳的不离不弃、一往情深，让人动容。得知多年的恋人阿琳得了重病，他依然和她结了婚，把她安排在工作地附近的医院，工作之余就去看她，陪她走过了生命最后的岁月。</p><p>工作中的费曼对待科学非常严谨认真。他对于教科书审阅的意见，以及在挑战者号失事的调查中，基于事实而不是汇报进行的细致分析、对于最后报告结论的坚持，都让人感受到他的认真，这也是科研人应该具备的一种态度。</p><p>值得一提的是费曼对于学习和教育的独到见解。他批评填鸭式背诵教育，认为靠记忆知识点，既没学到知识，又费时间，而这些知识点其实可以很容易查找到。他认为学习重点应该放在应用，思考这些知识如何应用，然后去实践、去试错。他的动手能力很强，从小就开始捣鼓电子元件、收音机等，遇到问题常常想到做各种实验来验证或纠正自己的分析。对于这一点，或许我们可以从他父亲的教育方式中得到线索。他回忆小时候父亲带他去郊外观察，第二天其他小伙伴们都能说出看到了某种鸟、甚至这种鸟在各种语言里叫什么名字，而他一问三不知，那他学了什么呢？原来，父亲教他观察鸟儿的行为习性，思考为什么会这样，进而引导他分析得出大自然的规律。多么巧妙的引导式教学！费曼也曾经说过对儿子的期望，他说不会push孩子去成为科学家、教授（这里引用了原词push，当时听到这句话的时候对于never push印象太深了）。实际上，他挺希望孩子去做一些实际的工作，比如工人。但是，他也略带自豪地承认没想到儿子还是子承父业，当了教授。</p><p>在 <strong><em>What Do You Care What Other People Think?</em></strong> 的后记里，费曼讨论了科学的价值这一哲学问题，在谈到科学发展的双刃剑效应时，他引用了佛家的一句话:“ To every man is given the key to the gates of heaven; the same key opens the gates of hell.” 同时，他在海边沉思的一段话也写得很优美，有一种物理学家的浪漫，摘录最后的一小节作为结尾：</p><blockquote><p>“ Stands at the sea,<br>wonders at wondering: I<br>a universe of atoms,<br>an atom in the universe.”</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;本文写于2019年7月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近听了两本有声书 &lt;strong&gt;&lt;em&gt;Surely You’re Joking, Mr. Feynman!&lt;/em&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;What Do You Care What Other People Think?&lt;/em&gt;&lt;/strong&gt; ，让我走近并了解费曼这位科学家。&lt;strong&gt;&lt;em&gt;Surely You’re Joking, Mr. Feynman!&lt;/em&gt;&lt;/strong&gt; 有很多小故事，就像朋友之间的聊天，读过之后知道了很多关于费曼的趣闻轶事。&lt;strong&gt;&lt;em&gt;What Do You Care What Other People Think?&lt;/em&gt;&lt;/strong&gt; 不如前者有名，但我特别推荐一读，里面对于教育、科学、研究等等的讨论和思考，让人很受启发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/view/subject/l/public/s4259438.jpg&quot; alt=&quot;图书封面图片，来源：豆瓣&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="有声书" scheme="https://juliecodestack.github.io/tags/%E6%9C%89%E5%A3%B0%E4%B9%A6/"/>
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="人物传记" scheme="https://juliecodestack.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"/>
    
      <category term="科技" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>读乔布斯传</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E8%AF%BB%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E8%AF%BB%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0/</id>
    <published>2020-04-22T13:05:45.000Z</published>
    <updated>2020-04-26T07:51:35.798Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文写于2019年8月。</p></blockquote><p>最近读了Walter Isaacson 为乔布斯写的传记 <strong><em>Steve Jobs</em></strong>，书中关于乔布斯的创新和产品理念让我反复思索、很受启发。这是一本值得再读一遍的好书。</p><a id="more"></a><p>我想谈谈书中让我感悟最深的几点：(由于早段时间读了马斯克的传记，我认为马斯克和乔布斯在一些方面有相似之处，因此有些地方也对马斯克进行了介绍。）</p><h4 id="1-创新"><a href="#1-创新" class="headerlink" title="1. 创新"></a>1. 创新</h4><p>公司创新的原动力在哪里？乔布斯认为这一动力来自研发设计人员、产品工程师，因此他坚持产品研发人员优先的原则。他曾经在访谈中提到一些大企业后来衰退的原因，就是销售人员取代产品研发人员在公司占据主导地位。当公司的主要精力不是放在产品上而只是为了迎合市场提高销量时，公司就失去了创新的动力。他有一个著名的论断：顾客其实不知道自己想要什么样的产品，因此不对现有市场进行调研，而是主动去发现潜在的需求和可能的市场，提供相应的产品。顾客只是没有见过这种新产品，新品一旦推出，会受欢迎。事实如此。在这一点上，马斯克和乔布斯有相似之处，他们都善于发现现有市场的短板或空白，然后由此发力，获得成功。比如乔布斯带领苹果走入音乐产业、手机产业…，马斯克发现银行在网上业务的空缺而开创网络支付。</p><h4 id="2-热情与信念"><a href="#2-热情与信念" class="headerlink" title="2. 热情与信念"></a>2. 热情与信念</h4><p>这里就要提到乔布斯的“现实扭曲”(reality distortion)，即坚信他认定的事，不考虑由现实环境得出的相反结论。比如，他认为某件事可以办到，他也让本来持怀疑态度的其他人相信可以做到，然后尽全力去做，最后出人意料地真的实现了。这让我想到了马斯克的员工对于马斯克提出的工作任务不能直接回答impossible（不可能），只能是提出有什么困难障碍，马斯克想办法解决，这也让他的员工的潜能得到最大发挥。乔布斯和马斯克都是对于工作和梦想充满热情的人，他们全身心地投入其中，主观积极性发挥到极致，这种态度直接影响了他们周围的人，最终完成了许多本来预计不可能实现的工作。</p><h4 id="3-禅宗对于乔布斯的影响"><a href="#3-禅宗对于乔布斯的影响" class="headerlink" title="3. 禅宗对于乔布斯的影响"></a>3. 禅宗对于乔布斯的影响</h4><p>受禅宗影响，乔布斯非常推崇<strong>简约</strong>。“ Simplicity is the ultimate sophistication. ”他在产品中要求工程师们做到这一点，产品简洁、易用。同时，他在自己的人生中也实践了这一点。他从十几岁起就成了一个虔诚的素食主义者，即便家财万贯，也没有去追求物质的享受。他关注的，就是如何把他视同孩子的苹果公司做到长久。</p><p>禅宗对乔布斯的另一个影响就是<strong>专注</strong>。他重回苹果后大刀阔斧精简产品系列，依据两方面特点：大众/专业版与台式机/笔记本进行组合，把产品缩减到四种。他每年都会与公司杰出人才讨论列出下一年公司发展最想做的十件事。然后，重点是，他只保留前三项。这一点真是时间管理的精髓：重要性优先。把有限的时间和精力投入到最想要做的事情上，才能得到最好的结果。什么都想做，什么都尝试去做一点，最后可能就是虎头蛇尾，什么都做不好。</p><h4 id="4-完美主义者"><a href="#4-完美主义者" class="headerlink" title="4. 完美主义者"></a>4. 完美主义者</h4><p>对完美的追求常常是辛苦的过程，但是，不得不说，读乔布斯传时，我也被乔布斯的完美主义所打动，正是这种极致的追求和精雕细琢，让人们在看到产品的一瞬间就感到愉悦。乔布斯常常提到他的理念：让科技和艺术结合，让人文与科学交融，苹果的产品正体现了这一点。另外，苹果的封闭平台、软硬件一体化设计与 Windows、Android 等开放平台的对比也在书中一次次提及。对此，乔布斯有他的理由，他认为要做一件好的产品，就必须从软件到硬件都关注到。他希望在自己手中将产品做到最佳呈现给顾客，顾客可以很容易就上手使用，而不用去学习复杂的操作手册。此外，一体化的过程也能让产品设计更加简约。</p><h4 id="5-另一面的乔布斯。"><a href="#5-另一面的乔布斯。" class="headerlink" title="5. 另一面的乔布斯。"></a>5. 另一面的乔布斯。</h4><p>除了工匠精神、追求卓越产品的理性一面，书中还展现了他感性的一面。第一次知道乔布斯在和合作伙伴吵架时还会用眼泪助攻；第一次知道乔布斯常常直言不讳说出自己的想法和感受。最让员工哭笑不得的是他的态度转变之大之快，可能刚刚听员工汇报时还说设计的新品 shitty，过一会儿他想通了觉得这个方案确实新颖可行，又会向同事们热情介绍 the best thing ever，而且让人感觉这就是他的点子。但是，乔布斯同样非常重视交流和团队协作。这一点，从苹果研发与设计的互相促进、产品研讨会的高效反馈、Pixar 办公大楼别具心裁的门厅设计等等，都可以看到。</p><p>以前我只听过乔布斯重回苹果这些年的传奇故事，这本书让我知道了年轻的乔布斯如何一步步成长，带领苹果公司走向巅峰。我很佩服乔布斯的远见卓识，他总是先人一步发现市场需求，推动创新、引领技术潮流。也不禁想象，如果他还在的话，苹果又会推出怎样让人惊奇的新产品呢？他去世前一段时间还关注到教育行业，认为教学也应该来到互联网上、实时互动。现在的网上课堂遍地开花，人们可以方便地获得知识，这或许也在一定程度上实现了乔布斯的构想。</p><p>1997 年苹果 “ Think Different ” 广告中有一句话:<strong>“The people who are crazy enough to think they can change the world are the ones who do.”</strong> 我想， 乔布斯正是这样一个伟大的人物。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文写于2019年8月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近读了Walter Isaacson 为乔布斯写的传记 &lt;strong&gt;&lt;em&gt;Steve Jobs&lt;/em&gt;&lt;/strong&gt;，书中关于乔布斯的创新和产品理念让我反复思索、很受启发。这是一本值得再读一遍的好书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="人物传记" scheme="https://juliecodestack.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"/>
    
      <category term="科技" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>不一样的马斯克</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A9%AC%E6%96%AF%E5%85%8B/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A9%AC%E6%96%AF%E5%85%8B/</id>
    <published>2020-04-22T13:05:25.000Z</published>
    <updated>2020-07-22T04:17:48.567Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文写于2019年6月。</p></blockquote><p>读 <strong><em>Elon Musk: Tesla, SpaceX, and the Quest for a Fantastic Future</em></strong> 这本传记之前，我听到的都是关于马斯克的传说，特斯拉、猎鹰系列火箭… 能够同时涉足如此多的领域、管理几家公司，我想马斯克应该是个天才型人物，以过人的头脑和见识取得了成功。</p><a id="more"></a><img src="https://img9.doubanio.com/view/subject/l/public/s28351575.jpg" width="325" height="450" alt="本书封面图片，来源：豆瓣" align="center"><p>这本书改变了我的想法。读的过程中，我的脑子里时常冒出那段著名的“天将降大任于斯人也，必先苦其心志、劳其筋骨、…”。没有谁的成功是轻而易举的。世人看到的都是表面的风光，少有人看到他爬到山顶的途中遇到的坎坷、留下的汗水和泪水。然而，这也正是马斯克最打动我的，他的字典里没有“不”、“不可能”这样的字眼，他会分析如何去实现、有什么困难或问题，然后一一解决。他的所作所为或许有些疯狂，但这也是他超越现在之处，因为他着眼于未来。Google 创始人 Larry Page 说，“ Good ideas are always crazy until they’re not.” X.com（后来合并了，成为了现在的Paypal）的出现改变了人们的支付方式和习惯； Tesla（特斯拉）之后，新能源电动车如雨后春笋般出现，改变了人们对于汽车的认识和选择；或许SpaceX（太空探索技术公司）的火箭也会在若干年后改变我们的生活，火星、外太空将不再那么遥远…</p><p>书中让我印象深刻的另一点，就是马斯克巧妙地将硅谷精简高效的工作方式引入到传统工业中（航天、汽车），产生了新的变革。比如设计研发人员的办公地点就“点缀”在工厂车间之中，让修改、测试十分快捷。从一个行业跨越到一个新的行业，专业知识不太精通可能是一个短板，但是同时也避免了固守陈规，比如马斯克就用了很多新的理念来设计和生产，这都是传统行业的从业者不想做或是不敢做的，但是马斯克的大胆创新和尝试取得了成效，也让他的跨领域成为优势。举个例子，坐车时我们可能会遇到一些不合适的地方，比如后排空间狭小等。很多人会说，以前就是这样设计，一直这样，没办法…马斯克不这么看，为什么不能改变？他和设计人员一起讨论想办法，特斯拉的 SUV 就采用了鹰翼式设计，方便家长安放儿童座椅。我到网上看了图片，确实很人性化。这也给我们启示，如何更好地进行跨领域、跨学科融合？</p><p>让我格外高兴的一点就是马斯克也很喜欢读书，小时候就是个小书迷，到后面连百科全书都拿来啃。成立 Space X 他也读了很多专业书籍，但他还找到了一个快速学习的方法：向员工提专业问题。他招的都是高材生，他们一开始以为老板要检验一下自己的真才实学，于是滔滔不绝地详细讲解一通，后来发现，原来马斯克正在快速吸收知识呢! 终身学习、不断探知新的领域，这也是我们应该努力做到的。</p><p>这本书让我认识了一个不一样的马斯克，也带给我很多关于创新、热情、乐观的思考，值得一读。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;本文写于2019年6月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读 &lt;strong&gt;&lt;em&gt;Elon Musk: Tesla, SpaceX, and the Quest for a Fantastic Future&lt;/em&gt;&lt;/strong&gt; 这本传记之前，我听到的都是关于马斯克的传说，特斯拉、猎鹰系列火箭… 能够同时涉足如此多的领域、管理几家公司，我想马斯克应该是个天才型人物，以过人的头脑和见识取得了成功。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="人物传记" scheme="https://juliecodestack.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"/>
    
      <category term="科技" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>许多记忆未曾诉说</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E8%AE%B8%E5%A4%9A%E8%AE%B0%E5%BF%86%E6%9C%AA%E6%9B%BE%E8%AF%89%E8%AF%B4/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E8%AE%B8%E5%A4%9A%E8%AE%B0%E5%BF%86%E6%9C%AA%E6%9B%BE%E8%AF%89%E8%AF%B4/</id>
    <published>2020-04-22T12:56:09.000Z</published>
    <updated>2020-04-25T13:46:36.184Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文写于2019年5月</p></blockquote><p>今天要和大家说一部有声书 <strong><em>My Dear I Wanted to Tell You</em></strong>。最早吸引我的，是这本有声书开头播放的音乐，悠扬舒缓，就像某个有阳光的午后想起一段往事时的背景乐。再加上又是丹丹龙（Dan Stevens）朗读，完美！</p><a id="more"></a><img src="/2020/04/22/%E8%AE%B8%E5%A4%9A%E8%AE%B0%E5%BF%86%E6%9C%AA%E6%9B%BE%E8%AF%89%E8%AF%B4/DanStevens.jpg" class title="Dan Stevens"><p>这是关于一战的悲伤故事，虽然最后的结局还算完满。一般写战争的小说，很多聚焦在战场的厮杀、英雄人物的塑造，或是战术战略的描写分析，极少有作品关注战争带来的创伤。这部小说以两对恋人为主要人物，描写了战争对于军人及后方的人们带来的伤痛。</p><p>Peter Locke 在与 Julia 结婚后不久即踏上征程。Julia 在家日日盼望 Peter 的归来。4年里，Peter 中途回来休过一次假，但是 Julia 发现他们之间疏远了，Peter 变得无法接近。Peter 冷漠的背后，是内心的煎熬：虽然回到宁静的后方，他脑海中挥之不去的还是战场上的血肉横飞、尸横遍野、以及死去的战友，这些可怕的记忆，他没法向妻子倾诉。本该是亲密快乐的一次相聚，最终却成了别扭尴尬的相处，造成两个人的隔阂。停战后，Peter 没有立即回家，而是在外面夜夜买醉。我想到了电影《猎鹿人》。它讲述了经常一起打猎野鹿的三个好朋友去参加越战的故事，战争完全改变了他们的人生。当他们被越军俘虏后，被迫参加“俄罗斯轮盘”赌局决定生死。他们幸运地逃了出来，后来失散了。其中 Nick 在医院康复后，留在了越南，成为了地下轮盘赌场的赌徒。当时我还和朋友讨论，我觉得 Nick 不像是失去理智的，他在轮盘赌局现场不是像 Steven 一样表现出极度害怕，而是难以接受自己和朋友之中有一个人要在赌局中死去。而且，他答应过在家乡等着他的女朋友他会回去。后来他的行为我觉得难以理解。但是，通过 <strong><em>My Dear I Wanted to Tell You</em></strong> 这本书中对 Peter Locke 的心理描写，我似乎有点理解了 Nick 的心理，他的精神在轮盘赌局里受到了强烈刺激，后来成为了梦靥，和 Peter 一样，他无法回到原来的人生，只想逃离一切。</p><p>Riley Purefoy 和 Nadine Waveney 这对恋人的故事则让我心碎，中间一度落泪。他们冲破了家庭的阻挠、克服了两地的分离，最后，当他们近在咫尺之时，却是残忍的别离。Riley 在战争中炸伤毁容回到后方医院，Nadine 来探望他很多次，他拒绝见她，最后谎称他有了新女友、与她分别。Riley 是为了不成为 Nadine 的负担？还是如他的护理 Rose Locke（Peter的堂妹）所说，他对于 Nadine 没有信心、觉得她无法面对这一现实？Nadine 伤心之余申请去了前线当战地护理人员，用工作麻醉自己。也许作者也心有不忍，让这一对恋人在停战后又见面了。Nadine 才知道 Riley 的谎言，她质问他为什么要这样，是怕她会离开他，所以他先主动分手吗？Riley 说，不，我怕你留下，因为同情我。Nadine 说，是，我会留下，但是，是因为爱。作者描写了 Riley 受伤后的心理变化，从开始的痛苦、迷茫、绝望; 到去拜访阵亡战友家人时，小女孩看到他的面容后并没有反应强烈，儿童的纯真打动了他，让他觉得自己的创伤不是那么恐怖，无须如此介意。在漫长的疗愈中，他一度封闭自己，拒绝了恋人的关怀, 最后，一个孩子给了他突然的温暖和信心，让他有勇气走入外面的世界、面对未来的人生，毕竟，他才刚刚 22 岁啊。有了这一转变，Riley 和 Nadine 再次相遇时，他们才能走到一起。我们总说，人要坚强地面对挫折与困难。然而，当不幸降临时，人们大都一时无法接受与应对，或许都要经历一段类似 Riley 的艰难的心路历程，才能平淡地看待人生的起起伏伏。</p><p>如果没有战争，这些年轻人都会过着甜蜜的生活，一起憧憬未来，一起去游览外面的世界。可是，战争将他们的人生彻底改变。虽然战火已经熄灭，他们身上的创伤已经难以抚平。结尾，作者说，生活静静地继续，也许吧，让时间的河流冲淡伤痛的记忆… </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文写于2019年5月&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天要和大家说一部有声书 &lt;strong&gt;&lt;em&gt;My Dear I Wanted to Tell You&lt;/em&gt;&lt;/strong&gt;。最早吸引我的，是这本有声书开头播放的音乐，悠扬舒缓，就像某个有阳光的午后想起一段往事时的背景乐。再加上又是丹丹龙（Dan Stevens）朗读，完美！&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="有声书" scheme="https://juliecodestack.github.io/tags/%E6%9C%89%E5%A3%B0%E4%B9%A6/"/>
    
      <category term="小说" scheme="https://juliecodestack.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="历史" scheme="https://juliecodestack.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>智能时代的思考</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2020-04-22T12:47:51.000Z</published>
    <updated>2020-04-24T04:56:18.530Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文写于2017年5月。</p></blockquote><p>吴军博士是在 Google 工作的自然语言处理与搜索专家，<strong>《智能时代：大数据与智能革命重新定义未来》</strong> 是他继《数学之美》、《文明之光》、《浪潮之巅》之后在 2016 年推出的最新力作。我读完这本书之后，最深刻的感受就是在思维方式上受到的冲击，它让我在看待数据和解决问题时有了新的视角和方法。</p><a id="more"></a><p><img src="https://img3.doubanio.com/view/subject/l/public/s29142393.jpg" alt="图书封面图片，来源：豆瓣"><br>这本书以去年大火的人机围棋大战开篇，介绍了 Google 的 AlphaGo 这一人工智能棋手，拉开了智能时代的大幕，然后讲述了大数据和智能技术如何改变我们的生活。作者在书中主要回答了以下问题：</p><h4 id="一、人工智能问题如何转化为大数据问题并解决。"><a href="#一、人工智能问题如何转化为大数据问题并解决。" class="headerlink" title="一、人工智能问题如何转化为大数据问题并解决。"></a>一、人工智能问题如何转化为大数据问题并解决。</h4><p>以前解决人工智能问题主要集中在如何让机器像人脑一样思考问题，强调模型及算法。现在的人工智能则采用模型简单、以强大的计算能力为支撑，以大量数据积累为基础的数据驱动方法。通俗地说，大数据方法对于问题不是从“0”开始思考，而是经过学习、即结合已知的丰富经验进行分析。比如 AlphaGo，就是在积累、学习了成千上万棋手的棋谱后，根据当前棋谱计算下一步走哪里的胜算概率更大，由此决定走哪一步。</p><p>这一转化也给了我们启示：当按部就班无法得到满意结果时，应该考虑换个思路、换个角度来解决问题。就像书中提到，以前解决语音识别问题、机器翻译问题，都需要相应的语音专家、语言学家，从发音过程、语言结构等方面进行分析。后来人们通过逆向思维分析发现，要得到结果可以有很多方法，就像处理黑箱问题一样，只要输入、输出符合条件，里面的过程可以近似拟合。用大数据和统计方法解决这些问题，跳出了以前固化的思维模型，结合大量数据学习，效果反而远超传统方法。</p><h4 id="二、智能时代的思维革命。"><a href="#二、智能时代的思维革命。" class="headerlink" title="二、智能时代的思维革命。"></a>二、智能时代的思维革命。</h4><p>工业革命提出的机械思维认为万物都有因果关系、有确定的规律可循，这也成为了人类发现和认知世界的重要假设。然而，现实生活中存在不确定性以及不可测（或者说测不准），对这一类现象的发现挑战了人类的认知。例如对于股市的预测反过来会影响人们的买卖操作，进而有可能出现与预测相反的波动。</p><p>那么应该如何处理这些问题呢？与其逃避、不如面对。科学家引入“信息”这一概念，通过加入信息减少不确定性来解决这一类问题，并结合大数据的应用出现了一种以结果为导向的新型思维方式，即大数据思维。其特点是：无假设条件、重视结果分析，由此得到一种新的事物关系：强关联关系。</p><p>这一思维革命其实是人类更加理性客观世界的结果，针对事实分析事物联系，而不是去寻求因果关系。我觉得书中提到的药物开发的例子很有说服力。一般药品研发流程往往是先分析症状、查找病因，然后寻找能消除病因的物质。实际上，这种因果分析方法会造成可寻找的药物范围有限，因为我们人类对于很多疾病原因的认识并不明确，而有的药物其实可以治疗多种疾病。比如斯坦福大学医学院发现治疗心脏病的某种药对治疗胃病特别有效。以前这类发现只能通过医生在临床偶然发现。如果药企采用新的大数据思维方式，在研发时可以大胆主动地去探究药物与很多疾病之间的关联进而发现特效药，尽管有的结果看上去有些不可思议。</p><p>在《大数据时代：生活，工作与思维的大变革》一书中，作者引用普林斯顿大学心理学专家，同时也是 2002 年诺贝尔经济学奖得主丹尼尔•卡尼曼（Daniel Kahneman）的观点，也对人类的思维模式进行了分析。卡尼曼指出，人有两种思维模式，第一种是不费力的快速思维，通过这种思维方式几秒钟就能得出结果；另一种是比较费力的慢性思维，对于特定的问题，需要考虑到位。快速思维模式使人们偏向用因果联系来看待周围的一切，即使这种关系并不存在。这是我们对已有的知识和信仰的执著。平时生活中，由于惰性，我们很少慢条斯理地思考问题，快速思维模式就占据了上风，因此我们会经常臆想出一些因果关系，最终导致了对世界的错误理解。回想一下，我们是不是很多时候都是凭着以前的“因果关系”认识进行快速思维，比如“天凉了，加衣服，不然会感冒的！”这句话初听上去很有道理，因为大家每个人成长中都或多或少听过，觉得很耳熟。实际上，穿得多少与感冒之间没有必然的因果关系。而我们在做一些重要决定时，就会采用第二种慢性思维分析问题，但是这种思考常常缓慢而痛苦，并且没有头绪，表现为犹豫不决、优柔寡断。现在好了，借助计算机强大的计算能力，我们可以更加科学理性地分析事实与思考问题。</p><h4 id="三、新时代的机遇与挑战。"><a href="#三、新时代的机遇与挑战。" class="headerlink" title="三、新时代的机遇与挑战。"></a>三、新时代的机遇与挑战。</h4><p>“这是最好的时代，也是最坏的时代。”英国大文豪狄更斯的这句话用在这里实在是再恰当不过了。经历过工业革命、第二次工业革命、信息革命，新一轮的智能革命正在来临，并悄然改变人们的生活。现在购物、支付、出行等等都离不开互联网，我们进入了万物互联的“扫码”时代。同时，我们也看到，机器智能的崛起开始让很多人丢了饭碗，比如制造业。现在服务业也慢慢被机器智能所代替，比如随着电子化停车场、线上超市的发展，停车场管理人员、超市导购员等工作人员的数量都将大幅缩减。</p><p>那么，如何拥抱智能时代？传统行业该何去何从？作者给出了很好的建议，传统行业可以通过与新技术融合产生新行业来得到发展。书中以小米和特斯拉为例，它们并不是手机公司、电动汽车公司等传统意义的制造公司，而是定义为互联网公司，即通过手机、电动汽车为平台、为顾客提供后续个性化的终端服务，这正是值得传统家电企业学习借鉴的。家电属于耐用品，很多家庭买了一台电器可以使用很多年，提高新产品的销售额很困难。然而，如果能通过智能终端收集数据、分析顾客使用需求并提供后续全面的个性化服务，可以收获比销售新机器更多的利润。</p><p>智能时代的另一大挑战则是来自隐私安全方面。现在数据使用缺乏监管，很多时候为了获得APP、软件的使用权，我们都在收集使用数据一栏点击“同意”，可是，那些使用数据的公司会将数据拿来做什么，我们并不知道。当公司、团体可以收集用户数据进行数据挖掘甚至个人画像时，其实我们的隐私已经暴露无遗，甚至可能在不知情的情况下导致利益损害。比如，当航空公司发现某一顾客对价格要求不敏感时，可能给该顾客的报价就会偏高。</p><p>针对这一问题，作者提出了两类解决办法：一是可以模糊处理，使处理数据的公司只能得到大概数据、不能得到精确的细节信息从而无法定位到个人。二是设立双向监视机制，使数据使用者在使用时留下痕迹，从而会规范其使用行为。我个人认为，数据的所有权、使用权目前亟需得到关注、重视与规范和约束。很多时候，人们往往轻易地将自身相关的数据交付出去，数据公司会如何利用数据，是否会危害我们的利益和安全，对此我们一无所知。如何在发挥数据价值与保证个人隐私安全之间平衡，也是值得我们深思的问题。</p><p>在看这本书的时候，我跟随吴军博士一起追溯工业社会的科技发展，又展望智能时代的前景，惊讶于技术的发展之快，畅想不远的未来。在 ALphaGo 战胜韩国高手李世石后，很多人担忧机器人会超过人类甚至统治人类，对此我并不认同。机器智能最终还是要由人类制造、受控于人类，所以关键在于如何使用。如果说每一次新技术的出现就是一把双刃剑，那么结果的好坏就取决于人类将其应用到何处，所以，最后决定我们未来的不是机器人，而是我们人类自身！</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;本文写于2017年5月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;吴军博士是在 Google 工作的自然语言处理与搜索专家，&lt;strong&gt;《智能时代：大数据与智能革命重新定义未来》&lt;/strong&gt; 是他继《数学之美》、《文明之光》、《浪潮之巅》之后在 2016 年推出的最新力作。我读完这本书之后，最深刻的感受就是在思维方式上受到的冲击，它让我在看待数据和解决问题时有了新的视角和方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="科技" scheme="https://juliecodestack.github.io/tags/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>读尤瓦尔赫拉利的简史三部曲</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E8%AF%BB%E5%B0%A4%E7%93%A6%E5%B0%94%E8%B5%AB%E6%8B%89%E5%88%A9%E7%9A%84%E7%AE%80%E5%8F%B2%E4%B8%89%E9%83%A8%E6%9B%B2/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E8%AF%BB%E5%B0%A4%E7%93%A6%E5%B0%94%E8%B5%AB%E6%8B%89%E5%88%A9%E7%9A%84%E7%AE%80%E5%8F%B2%E4%B8%89%E9%83%A8%E6%9B%B2/</id>
    <published>2020-04-22T12:38:51.000Z</published>
    <updated>2020-07-22T04:18:13.824Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文写于2019年3月。</p></blockquote><p>当我慕名打开尤瓦尔赫拉利的《人类简史》时，心中还有几分怀疑。印象中，简史类的书都是循一条线索，从很久以前讲到现在，看到一半就兴趣索然、读不下去了。然而，这本书让我眼前一亮，同时也大开眼界、或者说是脑洞大开。作者没有用时间线索加叙事的方式来写历史，而是以一种全新的哲学观点、宏观角度看待人类。他分析了远古社会、农业社会、工业社会，甚至展望未来，从社会、宗教、文化、生物学等多个方面进行分析，当需要举例说明佐证观点时，信手拈来一段历史故事娓娓道来，各大洲历史、多个种族文化宗教均有提及，让人不由得佩服他的博学。</p><a id="more"></a><img src="https://img3.doubanio.com/view/subject/l/public/s27814883.jpg" width="325" height="450" alt="本书封面图片，来源：豆瓣" align="center"><p>《未来简史》和《今日简史》分别是对《人类简史》中关于未来的设想和关于今日的思考展开阐述，基本的论点源自《人类简史》。下面将这三本书（或称简史三部曲）中引人思考的观点列出。</p><p>1、智人（书中对现代人类的一种称谓）之所以能在地球上众多物种中胜出，是因为智人能够进行大规模合作，而合作是通过虚构的故事来构建。我们可能意识不到，货币、国家、宗教、企业，等等，都是“想象”出来的，基于此，远隔千里的陌生人之间才有了信任和合作，进而有了巨大的力量。</p><p>2、现在的人类置身科技高度发达的社会，可还是远古狩猎采集者的心智、远古农民的胃。这一点很有意思。初看上去觉得不可思议、滑稽可笑，人类都进化几千上万年了，基因的力量还是如此强大吗？但仔细想想，我们身处钢筋水泥的城市里，是否总在怀念大自然的无拘无束、自由自在？很多时候的情绪、下意识的思维是否仍和祖先一样？现代社会的美味珍馐这么多，但人类钟情的食物大多是高热量的食物，对于这一类食物的喜爱正是祖先们的生存需要和选择。</p><p>3、为什么18世纪工业革命后欧洲迅速崛起，而亚洲却没有跟上步伐？我在读到中国近代史时总会思考这个问题。书中作者提出了一种观点，工业革命中欧洲在科学领域认识并承认了自我的无知，愿意为新知去探索发现。而当时亚洲的国家，君王的思想还停留在以自我、吾国为中心的层面，以为自己的疆土就是全部，也就失去了前进的动力。欧洲在进入资本主义社会后，在开拓殖民地的过程中，科学、知识为军事、经济、政治服务的同时又得到其支持，互相促进、互相发展。</p><p>4、知识和历史的相互作用：知识如果不能改变行为，就没有用处。但知识一旦改变了行为，本身就立刻失去了意义。研究历史的目的，是为了开拓视野，发现许多的可能。<br>书中还谈到了历史的真实性。历史就是一种叙事故事，不同的人有不同的视角。在古代，权贵、精英阶层才会著史，因此我们只会读到英雄人物的故事，而找不到关于平凡百姓的生平故事。</p><p>5、从种族主义到文化主义的微妙变化，不同文化之间的隔阂与融入的问题，引人深思。在文化层面，人们常常拒绝承认变化，总认为自己和祖先一脉相承。其实，对于人类群体，与其用延续性定义，不如看发生了什么。</p><p>6、关于战争，作者认为，以前的战争（古代战争以及两次世界大战）往往收获颇丰，可以攻城掠地、抢夺资源。现在的资源是知识，这让战争的产出变少，成本变大，因此发动战争的意愿降低。</p><p>7、对于未来展望，作者认为生物科技和计算机算法将对人类社会产生重要和颠覆性的影响。一方面，人工智能取代人类，将出现“无用阶级”：这一部分人存在，但没有工作，对社会而言，无足轻重。另一方面，生物科技的发展将加强健康人类的功能，或许价钱不菲，精英阶层或资产阶级可以通过搭上这列快车到达超人类（更美丽、更聪明、保持年轻），于是，在生理层面扩大了阶级分化。<br>还有一种危险：数字独裁。算法操控我们的一切。算法了解我们，我们依赖算法。为什么会这样，为什么算法会掌握我们的数据？仔细回想，当我们想要获得免费服务或小礼品时，是不是奉上自己的隐私数据去换取呢？在商家眼中，我们其实不是用户，而是商品。公民个人数据安全问题不容忽视，数据所有权亟待规范，这一点在我以前读过的有关大数据的书中也有谈论，但是似乎还没有好的解决方案提出。<br>作者悲哀地说，人类可能面临升级了身体和大脑，却失去了心智的危险，从升级版的黑猩猩变成了放大版的蚂蚁…</p><p>8、从面对未来挑战出发，作者提出了他的观点：人类应该多认识自己，认识自己的心智。<br>人类其实很少真的自己思考，总是以群体为单位思考。现在很多人对自己的理解常常是从别人的观点出发，活在别人的目光中，活在朋友圈、微博动态里。作者的建议：从现在开始，好好感受自己的体验，赶在大数据和算法操控影响我们之前，好好认识自己。</p><p>读到此，我已经分不清这是一本历史书还是哲学书，作者带我们从宇宙俯视整个人类，回故漫漫历史长河，展望无垠未来，在这之中思考的问题，还是属于哲学问题：我是谁？我和外在世界的联系与关系？我属于哪个群体？（书中提到人类属于社交动物）我的人生意义怎样？等等，当跳出了一般历史学的思维角度，如作者预期的那样，我的视野变得开拓，忽然又发现自己的渺小、人类在宇宙中的渺小，我们应该有一种谦卑的心对待自然、对待环境。以此时的心情，我忽然想到陈子昂的《登幽州台歌》——“前不见古人，后不见来者，念天地之悠悠，独怆然而涕下”。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;本文写于2019年3月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我慕名打开尤瓦尔赫拉利的《人类简史》时，心中还有几分怀疑。印象中，简史类的书都是循一条线索，从很久以前讲到现在，看到一半就兴趣索然、读不下去了。然而，这本书让我眼前一亮，同时也大开眼界、或者说是脑洞大开。作者没有用时间线索加叙事的方式来写历史，而是以一种全新的哲学观点、宏观角度看待人类。他分析了远古社会、农业社会、工业社会，甚至展望未来，从社会、宗教、文化、生物学等多个方面进行分析，当需要举例说明佐证观点时，信手拈来一段历史故事娓娓道来，各大洲历史、多个种族文化宗教均有提及，让人不由得佩服他的博学。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="非虚构" scheme="https://juliecodestack.github.io/tags/%E9%9D%9E%E8%99%9A%E6%9E%84/"/>
    
      <category term="历史" scheme="https://juliecodestack.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>对肯福莱特世纪三部曲的讨论和思考</title>
    <link href="https://juliecodestack.github.io/2020/04/22/%E5%AF%B9%E8%82%AF%E7%A6%8F%E8%8E%B1%E7%89%B9%E4%B8%96%E7%BA%AA%E4%B8%89%E9%83%A8%E6%9B%B2%E7%9A%84%E8%AE%A8%E8%AE%BA%E5%92%8C%E6%80%9D%E8%80%83/"/>
    <id>https://juliecodestack.github.io/2020/04/22/%E5%AF%B9%E8%82%AF%E7%A6%8F%E8%8E%B1%E7%89%B9%E4%B8%96%E7%BA%AA%E4%B8%89%E9%83%A8%E6%9B%B2%E7%9A%84%E8%AE%A8%E8%AE%BA%E5%92%8C%E6%80%9D%E8%80%83/</id>
    <published>2020-04-22T12:32:38.000Z</published>
    <updated>2020-07-22T04:15:57.168Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文写于2019年3月。</p></blockquote><p>经朋友推荐，我读了肯.福莱特（Ken Follett）的世纪三部曲：<strong>Fall of Giants（《巨人的陨落》）、Winter of the World（《世界的凛冬》）和 Edge of Eternity（《永恒的边缘》）</strong>。这套书讲述了二十世纪在英国、德国、美国、俄国（苏联）的几个家族跨越一个世纪的故事，包括一战、二战和冷战。看到书商的广告，全球读者平均几天看完这套书，一开始我还有点疑惑这套书是否真正有宣传中的吸引力。然而，打开第一本之后，我就停不下来，接着读完后面两本，一直到最后结束，我也掩卷沉思，仿佛和书中人物一起回忆往昔。肯.福莱特真的是一个讲故事高手，他把书中人物与重大历史事件结合，让读者在他们的故事中也看到了历史。</p><a id="more"></a><img src="https://img1.doubanio.com/view/subject/l/public/s4494549.jpg" width="325" height="450" alt="本书封面图片，来源：豆瓣" align="center"><p>当我在网上看对于这部作品的评论时，发现了不同的观点。一部分读者，比如像我这样的历史小白，认为肯.福莱特把历史写得鲜活生动，读起来很有趣；另一部分读者读过相关的近现代史，认为肯.福莱特以他自己的价值观在写历史，有的地方不够客观公正。这就涉及到历史小说中历史和虚构比重问题，以及作者能否代入过多自己的感情色彩。因为我刚读这类历史小说，我也无法评述，就作为后续读这类小说的一个思考题吧。</p><p>总结一下网上对于三部作品的争议点，以便后续拓展阅读：</p><p>1、<strong><em>Fall of Giants</em></strong>（《巨人的陨落》）是开山之作，评分也是三部曲中最高的。很多读者都认为它有一种史诗般的恢弘。而对这部作品不满意的读者恰恰是看过《圣殿春秋》后对肯.福莱特有较高期望的，他们认为肯.福莱特仍在用《圣殿春秋》的模式写这本书，对二十世纪初社会阶层的描写不够准确。在一战的描写中，似乎军官反而不如士兵有勇有谋。关于一战历史，有推荐：巴巴拉.塔奇曼著《八月炮火》。</p><p>2、<strong><em>Winter of the World</em></strong>（《世界的凛冬》）写的是二战历史。有读者认为它的叙事模式借鉴了几十年前赫尔曼.沃克的《战争风云》，尤其是美国的Dewar一家作为总统的亲信，与《战争风云》里亨利上校一样，得以见证很多重要历史时刻。我正好读过《战争风云》，它以美国一个海军武官亨利上校一家为中心展开故事，里面对于军事战略、政治外交等描写较为精确详细。而《世界的凛冬》涉及人物、国家众多，对于罗斯福决策、与盟国协商的历史时刻着墨不多。但是，我觉得《世界的凛冬》的故事更加通俗，肯.福莱特描写人物感情还是很细致的。《战争风云》主要人物没有死亡，（不知道它的续集《战争与回忆》里是否会有），我个人认为，这样描写战争的残酷性感染力相对弱了一点。《世界的凛冬》则描写了多次死亡，军人、平民，亲人、朋友，各种情况，让人在心痛中更深地体会到战争的残酷无情、生命的脆弱、当下的可贵。</p><p>3、<strong><em>Edge of Eternity</em></strong>（《永恒的边缘》）这部作品跨度几十年，作者难以顾全，只是挑了一部分历史进行描写，比如叱咤政坛的撒切尔夫人就没有提及。有读者认为作者对于美国、苏联政治的描写带有主观看法。感谢豆瓣网友ggarlic推荐相关历史作品：《光荣与梦想》、《极端的年代》。</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;本文写于2019年3月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经朋友推荐，我读了肯.福莱特（Ken Follett）的世纪三部曲：&lt;strong&gt;Fall of Giants（《巨人的陨落》）、Winter of the World（《世界的凛冬》）和 Edge of Eternity（《永恒的边缘》）&lt;/strong&gt;。这套书讲述了二十世纪在英国、德国、美国、俄国（苏联）的几个家族跨越一个世纪的故事，包括一战、二战和冷战。看到书商的广告，全球读者平均几天看完这套书，一开始我还有点疑惑这套书是否真正有宣传中的吸引力。然而，打开第一本之后，我就停不下来，接着读完后面两本，一直到最后结束，我也掩卷沉思，仿佛和书中人物一起回忆往昔。肯.福莱特真的是一个讲故事高手，他把书中人物与重大历史事件结合，让读者在他们的故事中也看到了历史。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://juliecodestack.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="英文原著" scheme="https://juliecodestack.github.io/tags/%E8%8B%B1%E6%96%87%E5%8E%9F%E8%91%97/"/>
    
      <category term="小说" scheme="https://juliecodestack.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="历史" scheme="https://juliecodestack.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Python编程之API入门：二 Python3中使用新浪微博API</title>
    <link href="https://juliecodestack.github.io/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/"/>
    <id>https://juliecodestack.github.io/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/</id>
    <published>2020-04-18T02:22:38.000Z</published>
    <updated>2020-04-19T03:48:52.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="回顾API使用流程"><a href="#回顾API使用流程" class="headerlink" title="回顾API使用流程"></a>回顾API使用流程</h4><p>在上一篇文章“Python编程之API入门：一 使用百度地图API查地理坐标”中，通过百度地图API的使用，我们看到API调用的一般流程为：生成API规定格式的url-&gt;通过urllib读取url中数据-&gt;对json格式的数据进行解析。下一步，让我们开始研究新浪微博API的使用吧！</p><a id="more"></a><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><a href="https://open.weibo.com/wiki/API" target="_blank" rel="noopener">新浪微博开放平台</a>是新浪微博API的使用平台。</p><img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI.png" class title="新浪微博开放平台示意图"><p>用微博账号登录该平台后，申请成为开发者，创建一个新应用后会得到唯一的App Key和App Secret。（注：应用不需要提交审核，只要创建新应用系统就会分配 Key 和 Secret ）在”我的应用/应用信息/基本信息”中也可以查到这两个信息。在这一页面中还有”我的应用/应用信息/高级信息“一项，点击进入并设置OAuth2.0授权回调页相关信息，如果不知道填什么好，可以设置为默认回调页：<a href="https://api.weibo.com/oauth2/default.html。" target="_blank" rel="noopener">https://api.weibo.com/oauth2/default.html。</a>  <strong>这三项信息都是后面需要用到的，请复制保存到文档。</strong></p><h4 id="微博API新特点"><a href="#微博API新特点" class="headerlink" title="微博API新特点"></a>微博API新特点</h4><p>与百度地图API相比，新浪微博API增加了OAuth2.0协议用于用户身份验证和授权。这里仅作简要说明（感兴趣的同学请查看网上文档示意图）：通过该协议，第三方应用可以获得用户授权，然后用该许可从授权服务器获得令牌(Token)，用于后续从API服务器查询数据时验证身份。</p><img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03oAuth2.png" class title="OAuth2.0协议示意图"><p>这一验证环节增加了url生成的复杂度，好在网站上已经有廖雪峰老师提供的SDK工具包:<a href="https://github.com/michaelliao/sinaweibopy" target="_blank" rel="noopener">sinaweibopy</a>（廖老师的github地址好像改过名字，因此网上很多旧链接无效，这个是新的有效链接），但是这一程序是基于Python2环境编写的，Python3有些系统库有更改，程序调用时经常报错。而作为Python入门者，改写程序以适应Python3环境无疑是一件困难的事。幸好有大神做了这一工作，感谢owolf针对Python3改写的SDK:<a href="https://github.com/olwolf/sinaweibopy3" target="_blank" rel="noopener">sinaweibopy3</a>，我使用过，正常运行，大家可以下载。在这里同时推荐owolf的文章<a href="https://www.jianshu.com/p/7c68f3ca73ed" target="_blank" rel="noopener">全网最详：python3调用新浪微博API接口获取数据</a>。</p><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p>下面介绍一下我使用新浪微博API的过程，为新入门的同学提供参考。</p><h5 id="1-参数设置"><a href="#1-参数设置" class="headerlink" title="1.参数设置"></a>1.参数设置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sinaweibopy3</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">APP_KEY =<span class="string">' 填入你的App Key'</span>  </span><br><span class="line">APP_SECRET=<span class="string">' 填入你的App Secret'</span></span><br><span class="line">REDIRECT_URL =<span class="string">' 填入你的授权回调页'</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li>该文件需要和sinaweibopy3.py放在同一个文件夹里。</li><li>填写的三项信息都是在<strong>准备</strong>中提到的信息。</li></ul><p>这里谈谈我粗心大意造成的一个bug，也给大家提个醒。一开始我运行程序时，每次都出现“重定向地址不匹配”的错误信息：</p><blockquote><p>用微博帐号登录出错了！对第三方应用进行授权时出现错误，请您联系第三方应用的开发者：XXX 或者稍后再试。<br>错误码：21322  重定向地址不匹配</p></blockquote><p>查找网上的解决方法，要设置回调页，但是在前面的步骤里我已经设置了，怎么还会有这个问题？后来看到一篇文章中提到回调页地址和程序中的REDIRECT_URL要一致，我想到了程序示例是<a href="http://api.weibo.com/oauth2/default.html，" target="_blank" rel="noopener">http://api.weibo.com/oauth2/default.html，</a>  用的是<code>http:</code>开头，我在填写时看到地址一样，就没有改动，而网站上是<code>https:</code>开头，一个<code>&#39;s&#39;</code>之差，当时觉得是一个地址，没想到相差大矣！</p><h5 id="2-OAuth2-0验证生成url"><a href="#2-OAuth2-0验证生成url" class="headerlink" title="2.OAuth2.0验证生成url"></a>2.OAuth2.0验证生成url</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client = sinaweibopy3.APIClient(app_key=APP_KEY, app_secret=APP_SECRET, redirect_uri=REDIRECT_URL)</span><br><span class="line">url = client.get_authorize_url()</span><br><span class="line">webbrowser.open_new(url)</span><br><span class="line">result = client.request_access_token(input(<span class="string">"please input code: "</span>))</span><br><span class="line">client.set_access_token(result.access_token, result.expires_in)</span><br></pre></td></tr></table></figure><p>注意：这就是调用sinaweibopy3，实现OAuth2.0中用户授权-&gt;获取Token这一过程。当程序运行到<code>client.request_access_token</code>时，会弹出输入提示”please input code: “，要求输入code？这是什么意思呢？打开浏览器就会看到出现了OAuth2.0验证回调页，地址栏一项<code>&#39;code=&#39;</code>后面有一串字符，这就是我们要的Token信息，把它复制后粘贴输入，程序继续运行。</p><h5 id="3-从API读取数据"><a href="#3-从API读取数据" class="headerlink" title="3.从API读取数据"></a>3.从API读取数据</h5><p>运行下列代码，可以读取公共微博的数据并显示结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result=client.public_timeline()</span><br><span class="line">print(json.dumps(result,indent=<span class="number">2</span>,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>而通过查看数据结构，可以提取特定信息。例如，可以通过以下代码，输出用户微博昵称、地点和最新微博正文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number=result[<span class="string">"total_number"</span>]</span><br><span class="line">print(number,<span class="string">"users:"</span>)</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> result[<span class="string">"statuses"</span>]:</span><br><span class="line">    print(u[<span class="string">"user"</span>][<span class="string">"screen_name"</span>])</span><br><span class="line">    print(u[<span class="string">"user"</span>][<span class="string">"location"</span>])</span><br><span class="line">    print(u[<span class="string">"text"</span>])</span><br></pre></td></tr></table></figure><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>如果要查询其他信息，比如获取用户的关注列表，怎么办呢？让我们来试着编写出相应的函数。</p><h5 id="1-查看函数信息"><a href="#1-查看函数信息" class="headerlink" title="1.查看函数信息"></a>1.查看函数信息</h5><p>在新浪微博API中指定的url: <a href="https://api.weibo.com/2/friendships/friends.json" target="_blank" rel="noopener">https://api.weibo.com/2/friendships/friends.json</a></p><img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03url.png" class title="查询用户关注列表的url"><p>以及定义的请求参数是：access_token, uid, screen_name, count, cursor, time_status。</p><img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03parameters.png" class title="函数定义的请求参数信息"><p>其中，access_token需要填写，uid和screen_name分别是用户id和昵称，二者必填且只填一项。（注：接口升级后，只能为当前授权用户） count, cursor可使用默认参数。count是单页返回记录条数，默认为5，最大不超过5，cursor返回结果的游标。trim_status是显示status字段的开关，0：返回完整status字段，1：仅返回status_id，默认为1。</p><h5 id="2-编写fs-friends-函数"><a href="#2-编写fs-friends-函数" class="headerlink" title="2.编写fs_friends()函数"></a>2.编写<code>fs_friends()</code>函数</h5><p>首先查看一下，在sinaweibopy3.py中是如何实现<code>public_timeline()</code>呢?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public_timeline</span><span class="params">(self)</span>:</span>       </span><br><span class="line">        result = _http_get(<span class="string">'%s'</span>% (self.api_url)  + <span class="string">'statuses/public_timeline.json'</span>,</span><br><span class="line">                           access_token=self.access_token, </span><br><span class="line">                           count=<span class="number">50</span>, </span><br><span class="line">                           page=<span class="number">1</span>, </span><br><span class="line">                           base_app=<span class="number">0</span>,</span><br><span class="line">                )</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>对照代码发现<code>%s&#39;% (self.api_url)</code>就是<code>https://api.weibo.com/2</code>，因此，我们只需要把 <code>&#39;statuses/public_timeline.json&#39;</code>改成<code>&#39;friendships/friends.json&#39;</code>，并添加必填的请求参数，就可以写出一个所需要的<code>fs_friends()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fs_friends</span><span class="params">(self)</span>:</span></span><br><span class="line">        result=_http_get(<span class="string">'%s'</span>% (self.api_url)  + <span class="string">'friendships/friends.json'</span>, </span><br><span class="line">                           access_token=self.access_token, </span><br><span class="line">                           screen_name=<span class="string">'填入你自己的微博昵称'</span> ,</span><br><span class="line">                           trim_status=<span class="number">0</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>注：trim_status默认为1，设置为0才会得到完整status字段（其中包括最新微博正文）。</p><h5 id="3-在主程序中调用fs-friends-函数"><a href="#3-在主程序中调用fs-friends-函数" class="headerlink" title="3.在主程序中调用fs_friends()函数"></a>3.在主程序中调用<code>fs_friends()</code>函数</h5><p>参考原有的<code>client.public_timeline()</code>，得到以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = client.fs_friends()</span><br><span class="line">print(json.dumps(result,indent=<span class="number">2</span>,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>这样就可以看到关注的人的列表，包括基本信息及最新微博。</p><p>进一步地，可以通过以下代码，提取最新微博内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> result[<span class="string">'users'</span>]:</span><br><span class="line">    print(<span class="string">"\n"</span>,u[<span class="string">'screen_name'</span>])</span><br><span class="line">    print(u[<span class="string">'location'</span>])</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'status'</span> <span class="keyword">not</span> <span class="keyword">in</span> u):</span><br><span class="line">        print(<span class="string">'not found\n'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(u[<span class="string">'status'</span>][<span class="string">'text'</span>])</span><br></pre></td></tr></table></figure><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p><strong>以下是我还在思考的问题，欢迎交流指教，谢谢！</strong><br>1、请求参数设置里count不大于5，我在实际运行程序时只看到4个关注用户及微博正文，能否读取更多用户，如何读取？<br>2、我还尝试了编写statuses/home_timeline(获取当前登录用户及其所关注（授权）用户的最新微博)的查询函数，但是因为参数设置问题，显示结果为Null（空）。我认为问题出在max_id参数上，说明中指出：若指定此参数，则返回ID小于或等于max_id的微博，默认为0，但是设多大合理？我有些困惑。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;回顾API使用流程&quot;&gt;&lt;a href=&quot;#回顾API使用流程&quot; class=&quot;headerlink&quot; title=&quot;回顾API使用流程&quot;&gt;&lt;/a&gt;回顾API使用流程&lt;/h4&gt;&lt;p&gt;在上一篇文章“Python编程之API入门：一 使用百度地图API查地理坐标”中，通过百度地图API的使用，我们看到API调用的一般流程为：生成API规定格式的url-&amp;gt;通过urllib读取url中数据-&amp;gt;对json格式的数据进行解析。下一步，让我们开始研究新浪微博API的使用吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://juliecodestack.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://juliecodestack.github.io/tags/Python/"/>
    
      <category term="API" scheme="https://juliecodestack.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Python编程之API入门：一 使用百度地图API查地理坐标</title>
    <link href="https://juliecodestack.github.io/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%B8%80-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E6%9F%A5%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/"/>
    <id>https://juliecodestack.github.io/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%B8%80-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E6%9F%A5%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/</id>
    <published>2020-04-18T02:17:29.000Z</published>
    <updated>2020-04-19T03:48:25.191Z</updated>
    
    <content type="html"><![CDATA[<p>在网络编程中，我们会和API打交道。那么，什么是API?如何使用API呢？本文分享了一下笔者对API的理解以及百度地图API的使用。</p><a id="more"></a><p>API是”Application Programming Interface（应用程序编程接口）”的缩写。如果那一大堆的术语和定义让你头晕，不妨试着这样理解：网络服务商（比如百度、微博等）存有大量数据，我们可以查询数据，但是需要按照一定的格式/协议，否则服务商不知道我们的需求无法进行处理，我们拿到数据也看不懂。通过API接口规范，通信双方都能明白对方传送的信息和数据，同时也简化了操作（只要按照规定的格式输入，就可以得到已知格式的输出，我们无需了解具体实现的技术细节，是不是很省心呢？）</p><p>下面以<a href="http://lbsyun.baidu.com/index.php?title=webapi" target="_blank" rel="noopener">百度地图Web服务API</a>的调用为例。</p><img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%B8%80-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E6%9F%A5%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/02%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E5%B9%B3%E5%8F%B0.png" class title="百度地图API平台示意图"> <p>要使用的是图中所示“正/逆地理编码服务”。在使用服务前，需要登录百度账号（如果没有就注册一个），申请成为百度开发者，然后创建一个你自己的应用，就可以收到一个对应的服务密钥(AK)。在服务配置页面，有两种校验方式，一种是IP白名单方式，一种是sn校验方式。我根据文章<a href="https://www.cnblogs.com/liao-sir/p/8367683.html" target="_blank" rel="noopener"><br>python实现百度地图API获取某地址的经纬度</a>中的介绍，选择了sn校验方式，这样页面上会有SK。请将AK和SK两个序列码保存好，这就是你个人的验证信息。下一步使用百度地图API时要用到。</p><p>要编写的这个Python小程序实现的功能是：<strong>输入某个地址，得到相应的经纬度坐标信息</strong>。分三步实现：</p><ol><li>生成url（用于提交到API进行查询）</li><li>与API交互，查询并返回数据（json格式） </li><li>利用json解析并输出。</li></ol><p>下面分别介绍具体实现。</p><h3 id="1-sn码及url的生成"><a href="#1-sn码及url的生成" class="headerlink" title="1. sn码及url的生成"></a>1. sn码及url的生成</h3><p>url= <a href="http://api.map.baidu.com/geocoder/v2/?address=“输入的地点名”&amp;output=json&amp;ak=&#39;你的AK码&#39;&amp;sn=&#39;你的sn码&#39;。" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=“输入的地点名”&amp;output=json&amp;ak=&#39;你的AK码&#39;&amp;sn=&#39;你的sn码&#39;。</a><br>需要注意的是：</p><ul><li>由于url中有中文字符串，需要使用函数<code>urllib.parse.quote(inputstr, safe=&quot;/:=&amp;?#+!$,;&#39;@()*[]&quot;)</code>转换一下编码。</li><li>在url里output可以选择输出为json格式或xml格式，默认是xml格式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.parse,urllib.error</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">MyAK=<span class="string">'这里请填入你的AK'</span></span><br><span class="line">MySK=<span class="string">'这里请填入你的SK'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    address = input(<span class="string">'输入地点：'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(address)&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#产生sn码</span></span><br><span class="line">    queryStr=<span class="string">"/geocoder/v2/?address="</span>+address+<span class="string">'&amp;output=json&amp;ak='</span>+MyAK</span><br><span class="line">    encodedStr=urllib.parse.quote(queryStr, safe=<span class="string">"/:=&amp;?#+!$,;'@()*[]"</span>)</span><br><span class="line">    rawStr=encodedStr+MySK</span><br><span class="line">    sn=(hashlib.md5(urllib.parse.quote_plus(rawStr).encode(<span class="string">"utf8"</span>)).hexdigest())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成url  </span></span><br><span class="line">    url=urllib.parse.quote(<span class="string">"http://api.map.baidu.com"</span>+queryStr+<span class="string">"&amp;sn="</span>+sn,safe=<span class="string">"/:=&amp;?#+!$,;'@()*[]"</span>)</span><br><span class="line">    print(<span class="string">'Retrieving'</span>,url)</span><br></pre></td></tr></table></figure><h3 id="2-输入url，利用urllib从API读取数据"><a href="#2-输入url，利用urllib从API读取数据" class="headerlink" title="2. 输入url，利用urllib从API读取数据"></a>2. 输入url，利用urllib从API读取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从API读取数据</span></span><br><span class="line">uh=urllib.request.urlopen(url)</span><br><span class="line">data=uh.read().decode()</span><br><span class="line">print(<span class="string">'Retrieved'</span>,len(data),<span class="string">'characters'</span>)</span><br></pre></td></tr></table></figure><h3 id="3-利用json对返回数据进行解析。"><a href="#3-利用json对返回数据进行解析。" class="headerlink" title="3. 利用json对返回数据进行解析。"></a>3. 利用json对返回数据进行解析。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解析数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        js=json.loads(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        js=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> js <span class="keyword">or</span> <span class="string">'status'</span><span class="keyword">not</span> <span class="keyword">in</span> js <span class="keyword">or</span> js[<span class="string">'status'</span>]!=<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'======Failure===='</span>)</span><br><span class="line">        print(data)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(json.dumps(js,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><p>以上代码可输出得到json格式的数据。例如，输入“百度大厦”后，程序输出的json格式数据如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"location"</span>: &#123;</span><br><span class="line">            <span class="attr">"lng"</span>: <span class="number">116.30695597357376</span>,</span><br><span class="line">            <span class="attr">"lat"</span>: <span class="number">40.05738753357608</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"precise"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"confidence"</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="attr">"comprehension"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">"level"</span>: <span class="string">"商务大厦"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在这里一开始中文字符<code>&quot;商务大厦&quot;</code>不能正确显示，我从文章<a href="https://www.cnblogs.com/mingjiatang/p/9527345.html" target="_blank" rel="noopener">python中文编码&amp;json中文输出问题</a>中找到了答案，在<code>json.dumps()</code>函数中，默认转换为 ASCII 编码，中文字符就无法转换显示，因此在<code>json.dumps()</code>中要设置<code>ensure_ascii=False</code>。</p><p>最后，通过以下代码，可提取经纬度坐标等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取经纬度坐标和地址类型</span></span><br><span class="line">lat=js[<span class="string">"result"</span>][<span class="string">"location"</span>][<span class="string">"lat"</span>]</span><br><span class="line">lng=js[<span class="string">"result"</span>][<span class="string">"location"</span>][<span class="string">"lng"</span>]</span><br><span class="line">print(<span class="string">'纬度'</span>,lat,<span class="string">'经度'</span>,lng)</span><br><span class="line">level=js[<span class="string">"result"</span>][<span class="string">"level"</span>]</span><br><span class="line">print(<span class="string">'地址类型'</span>,level)</span><br></pre></td></tr></table></figure><p>总结：按照规范发送 url 以及对返回 json 或 xml 格式数据正确解析，另外注意中文字符的编码问题，就可以上手API。怎么样？你也快来试试吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网络编程中，我们会和API打交道。那么，什么是API?如何使用API呢？本文分享了一下笔者对API的理解以及百度地图API的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://juliecodestack.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://juliecodestack.github.io/tags/Python/"/>
    
      <category term="API" scheme="https://juliecodestack.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>写作前的思考：Why&amp;How</title>
    <link href="https://juliecodestack.github.io/2020/04/18/%E5%86%99%E4%BD%9C%E5%89%8D%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%9AWhy&amp;How/"/>
    <id>https://juliecodestack.github.io/2020/04/18/%E5%86%99%E4%BD%9C%E5%89%8D%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%9AWhy&amp;How/</id>
    <published>2020-04-18T00:55:58.000Z</published>
    <updated>2020-07-22T03:47:29.828Z</updated>
    
    <content type="html"><![CDATA[<p>经过一番努力，终于在github上建了这个博客小站。趁着现在仍然对写作抱有兴趣和热情，我记录下写作以及建立这个小站的初衷，以后动力不足时可以看一下充电。</p><a id="more"></a><img src="/2020/04/18/%E5%86%99%E4%BD%9C%E5%89%8D%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%9AWhy&How/writing.jpg" alt="Andrew Neel from Pexels" align="center"><p>我最近在看fast.ai创始人Jeremy Howard老师的机器学习课程视频，其中他多次推荐博客写作。他认为，写技术博客可以很好地理解和运用知识。其中给我最大的启发就是技术博客的写作角度。在此之前，我一直认为，只有我对某个领域很懂，才可以写一些文章来帮助别人。其实不然。虽然我是新手小白，但是如果我弄懂了一个问题，就可以总结分享出来，帮助以后入门的小白。而且，新手小白反而更能理解新手容易遇到的困惑和问题。另外，这个博客可以作为学习笔记使用，整理知识点，方便自己日后查阅。而当别人遇到同样的问题需要解答时，也可发送博客文章给对方，高效地分享知识。</p><p>平时我喜欢读书、语言学习、听轻音乐等。最近两三年我加大了英文原著阅读量，同时也对英文有声书兴趣正浓。因此，这个博客小站里也有一部分文章是写技术之外的兴趣爱好：书评、英语学习笔记、…。</p><p>坚持写作，思考、表达，不断完善、不断提高。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一番努力，终于在github上建了这个博客小站。趁着现在仍然对写作抱有兴趣和热情，我记录下写作以及建立这个小站的初衷，以后动力不足时可以看一下充电。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://juliecodestack.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
